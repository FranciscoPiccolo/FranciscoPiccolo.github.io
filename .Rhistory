encoding = "latin1")
bpp <-
read.csv(file = paste(file_path,
"dataset_bpp_consolidado.csv",
sep = ""),
encoding = "latin1")
dre %>%
head()
dre %>%
dim()
bpa %>%
dim()
bpp %>%
dim()
# Os 3 datasets possuem o mesmo número de colunas
unified_dataset <- dre %>% union_all(bpa) %>% union_all(bpp)
unified_dataset %>% dim()
unified_dataset <-
dre %>%
mutate(source = "dre") %>%
union_all(bpa %>%
mutate(source = "bpa")) %>%
union_all(bpp %>%
mutate(source = "bpp"))
unified_dataset %>% dim()
unified_dataset %>% head()
unified_dataset_adj <-
unified_dataset %>%
select(CNPJ_CIA,
CD_CVM,
DT_REFER,
DENOM_CIA,
ESCALA_MOEDA,
CD_CONTA,
DS_CONTA,
VL_CONTA,
source) %>%
head()
unified_dataset %>%
select(CNPJ_CIA,
CD_CVM,
DT_REFER,
DENOM_CIA,
ESCALA_MOEDA,
CD_CONTA,
DS_CONTA,
VL_CONTA,
source) %>%
head()
unified_dataset_adj <-
unified_dataset %>%
select(CNPJ_CIA,
CD_CVM,
DT_REFER,
DENOM_CIA,
ESCALA_MOEDA,
CD_CONTA,
DS_CONTA,
VL_CONTA,
source) %>%
rename(cnpj = CNPJ_CIA,
cvm_code = CD_CVM,
reference_date = DT_REFER,
company_name = DENOM_CIA,
currency = ESCALA_MOEDA,
account_number = CD_CONTA,
account_description = DS_CONTA,
value = VL_CONTA) %>%
head()
unified_dataset %>%
select(CNPJ_CIA,
CD_CVM,
DT_REFER,
DENOM_CIA,
ESCALA_MOEDA,
CD_CONTA,
DS_CONTA,
VL_CONTA,
source) %>%
rename(cnpj = CNPJ_CIA,
cvm_code = CD_CVM,
reference_date = DT_REFER,
company_name = DENOM_CIA,
currency = ESCALA_MOEDA,
account_number = CD_CONTA,
account_description = DS_CONTA,
value = VL_CONTA) %>%
head()
unified_dataset_adj <-
unified_dataset %>%
select(CNPJ_CIA,
CD_CVM,
DT_REFER,
DENOM_CIA,
ESCALA_MOEDA,
CD_CONTA,
DS_CONTA,
VL_CONTA,
source) %>%
rename(cnpj = CNPJ_CIA,
cvm_code = CD_CVM,
reference_date = DT_REFER,
company_name = DENOM_CIA,
currency = ESCALA_MOEDA,
account_number = CD_CONTA,
account_description = DS_CONTA,
value = VL_CONTA)
# Números de registros e quantodade de colunas
unified_dataset_adj %>%
dim()
# Tipos de dados
dataset %>%
str()
# Tipos de dados
unified_dataset_adj %>%
str()
unified_dataset_adj %>%
mutate(reference_date == lubridate::ydm(unified_dataset_adj$reference_date)) -> unified_dataset_adj
unified_dataset_adj %>% str()
unified_dataset_adj
unified_dataset_adj %>%
head()
unified_dataset_adj$reference_date <- lubridate::ymd(unified_dataset_adj$reference_date)
unified_dataset_adj %>%
head()
unified_dataset_adj %>%
str()
# Conferindo se há duplicadas
unified_dataset_adj %>% dim()
# Salvando dataset após remoção das duplicadas
unified_dataset_adj %>%
distinct_all() %>%
dim()
unified_dataset_adj <-
unified_dataset_adj %>%
distinct_all()
unified_dataset_adj %>%
select(company_name) %>%
distinct_all() %>%
View()
unified_dataset_adj %>%
filter(company_name == "VIA VAREJO S.A.") %>%
head()
unified_dataset_adj %>%
filter(company_name == "VIA VAREJO S.A.") %>%
tidyr::spread("reference_date") %>%
head()
unified_dataset_adj %>%
filter(company_name == "VIA VAREJO S.A.") %>%
tidyr::spread("reference_date","value") %>%
head()
unified_dataset_adj %>%
filter(company_name == "VIA VAREJO S.A.") %>%
tidyr::spread("reference_date","value") %>%
View()
unified_dataset_adj %>%
filter(company_name == "VIA VAREJO S.A.",
account_number %in% c("1","
1.01")) %>%
tidyr::spread("reference_date","value") %>%
head()
unified_dataset_adj %>%
filter(company_name == "VIA VAREJO S.A.",
account_number %in% c("1","
1.01")) %>%
ggplot()+
geom_line(mapping = aes(x = reference_date, y = value))+
facet_wrap(~account_description)
unified_dataset_adj %>%
filter(company_name == "VIA VAREJO S.A.",
account_number %in% c("1","1.01","2.01")) %>%
ggplot()+
geom_line(mapping = aes(x = reference_date, y = value))+
facet_wrap(~account_description)
unified_dataset_adj %>%
filter(company_name == "VIA VAREJO S.A.",
account_number %in% c("1","1.01","2.01","3.01","3.03","3.04")) %>%
ggplot()+
geom_line(mapping = aes(x = reference_date, y = value))+
facet_wrap(~account_description)
# Os 3 datasets possuem o mesmo número de colunas
unified_dataset <-
dre %>%
mutate(source = "dre") %>%
union_all(bpa %>%
mutate(source = "bpa")) %>%
union_all(bpp %>%
mutate(source = "bpp"))
unified_dataset_adj <-
unified_dataset %>%
select(CNPJ_CIA,
CD_CVM,
DT_REFER,
DENOM_CIA,
ESCALA_MOEDA,
CD_CONTA,
DS_CONTA,
VL_CONTA,
source) %>%
rename(cnpj = CNPJ_CIA,
cvm_code = CD_CVM,
reference_date = DT_REFER,
company_name = DENOM_CIA,
currency = ESCALA_MOEDA,
account_number = CD_CONTA,
account_description = DS_CONTA,
value = VL_CONTA)
unified_dataset_adj$reference_date <- lubridate::ymd(unified_dataset_adj$reference_date)
# Conferindo se há duplicadas
unified_dataset_adj %>% dim()
unified_dataset_adj %>%
distinct_all() %>%
dim()
unified_dataset_adj <-
unified_dataset_adj %>%
distinct_all()
unified_dataset_adj %>%
filter(company_name == "VIA VAREJO S.A.",
account_number %in% c("1","1.01","2.01","3.01","3.03","3.04")) %>%
ggplot()+
geom_line(mapping = aes(x = reference_date, y = value))+
facet_wrap(~account_description)
unified_dataset_adj %>%
filter(company_name == "VIA VAREJO S.A.") %>%
tidyr::spread("reference_date", "value") %>%
View()
left_side <- matrix(c(-5,9,2,1),
nrow = 2)
right_side <- matrix(c(3,2),
nrow = 2)
library(tidyverse)
library(patchwork)
library(matlib)
# Função para padronizar o design dos gráficos
theme_graph <- function(){
theme(
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(face = "italic", size = 9),
axis.text = element_text(size = 9),
axis.title = element_text(face = "italic", size = 9),
strip.background = element_rect(fill = "grey"),
strip.text = element_text(face = "bold"),
legend.title = element_blank(),
legend.position = "bottom",
panel.grid.major = element_line(
rgb(198, 198, 216, maxColorValue = 255),
linetype = "dotted"),
panel.grid.minor = element_line(
rgb(198, 198, 216, maxColorValue = 255),
linetype = "dotted"),
panel.background = element_rect(fill = "#FEFDFF")
)
}
all.equal(R(left_side), R(cbind(left_side,right_side)))
solve(left_side,right_side)
matlib::plotEqn(left_side,right_side)
left_side <- matrix(c(1,2,-1,3,
-1,1,2,0,
2,-2,-4,0,
-1,-2,1,-3),
nrow = 4)
left_side
right_side <- matrix(c(-1,-2,1,-3),
nrow = 4)
all.equal(R(left_side), R(cbind(left_side,right_side)))
solve(left_side,right_side)
left_side <- matrix(c(1,2,-1,3,
-1,1,2,0,
2,-2,-4,0,
-1,-2,1,-3),
nrow = 4)
right_side <- matrix(c(-1,-2,1,-3),
nrow = 4)
solve(left_side,right_side)
det(left_side)
solve(left_side,right_side)
solve(left_side,right_side)
det(left_side)
package_version(ellipsis)
package_version(ellipsis)
install.packages()
installed.packages()
installed.packages() %>% View()
update.packages(ellipsis)
update.packages("ellipsis")
installed.packages() %>% View()
library(tidyverse)
a
a -> c("Serra de São Bento UF RN")
a
a <- c("Serra de São Bento UF RN")
a
a <- c("Município" "Serra" "de" "São" "Bento" "UF" "RN")
a
a <- c("Município Serra de São Bento UF RN")
a
?MASS
??MASS
library(MASS)
MASS::ginv(diag(4),-left_side)
det(left_side)
matlib::echelon(A = left_side, B = right_side)
matlib::echelon(A = left_side, B = right_side, reduced = T)
A <- matrix(c(2, 1, -1,
-3, -1, 2,
-2,  1, 2), 3, 3, byrow=TRUE)
b <- c(8, -11, -3)
echelon(A, b, verbose=TRUE, fractions=TRUE) # reduced row-echelon form
echelon(A, b, reduced=FALSE, verbose=TRUE, fractions=TRUE) # row-echelon form
echelon(A, b, verbose=TRUE, fractions=TRUE) # reduced row-echelon form
echelon(A, b, reduced=FALSE, verbose=TRUE, fractions=TRUE) # row-echelon form
matlib::echelon(A = left_side, B = right_side, reduced = F)
matrix(c(1,2,-1,
2,-1,3,
4,3,1,
nrow = 3))
a <- matrix(c(1,2,-1,
2,-1,3,
4,3,1,
nrow = 3))
det(a)
a <- matrix(c(1,2,-1,
2,-1,3,
4,3,1),
nrow = 3)
a
det(a)
A <- matrix( c(5, 1, 0,
3,-1, 2,
4, 0,-1), nrow=3, byrow=TRUE)
det(A)
matlib::inv(A)
left_side
matlib::inv(left_side)
blogdown:::preview_site(startup = TRUE)
install.packages("viridis")
install.packages("ggdark")
circleFun <- function(center = c(0, 0), diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
dat <-
circleFun(c(1, -1), 2.3, npoints = 100)
ggplot(dat,aes(x, y)) +
geom_path()
library(tidyverse)
circleFun <- function(center = c(0, 0), diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
dat <-
circleFun(c(1, -1), 2.3, npoints = 100)
ggplot(dat,aes(x, y)) +
geom_path()
genFun <- function(center = c(0, 0), npoints = 500, c1 = 2.5, c2 = -5, c3 = 4.28, c4 = 2.3){
t <- seq(0, 2*pi, length.out = npoints)
xx <- center[1] + c1*(sin(c2*t)*sin(c2*t))*(2^cos(cos(c3*c4*t)))
yy <- center[2] + c1*sin(sin(c2*t))*(cos(c3*c4*t)*cos(c3*c4*t))
a <- data.frame(x = xx, y = yy)
return(a)
}
ggplot(dat, aes(x, y)) +
geom_path()
genFun <- function(center = c(0, 0), npoints = 500, c1 = 2.5, c2 = -5, c3 = 4.28, c4 = 2.3){
t <- seq(0, 2*pi, length.out = npoints)
xx <- center[1] + c1*(sin(c2*t)*sin(c2*t))*(2^cos(cos(c3*c4*t)))
yy <- center[2] + c1*sin(sin(c2*t))*(cos(c3*c4*t)*cos(c3*c4*t))
a <- data.frame(x = xx, y = yy)
return(a)
}
dat <-
genFun(c(1,-1), npoints = 100)
ggplot(dat, aes(x, y)) +
geom_path()
ggplot(dat, aes(x, y)) +
geom_line()
ggplot(dat, aes(x, y)) +
geom_line()
ggplot(dat, aes(x, y)) +
geom_line()
ggplot(dat, aes(x, y)) +
geom_path()
ggplot(dat, aes(x, y)) +
geom_path()
dat <-
genFun(c(1,-1), npoints = 500, c1 = 5, c2 = -3, c3 = 5, c4 = 2)
ggplot(dat, aes(x, y)) +
geom_path()
ggplot(dat, aes(x, y)) +
geom_path()
dat <-
genFun(c(1,-1), npoints = 5000)
ggplot(dat, aes(x, y)) +
geom_line()
dat <-
genFun(c(1,-1), npoints = 5000)
ggplot(dat, aes(x, y)) +
geom_line()
dat <-
genFun(c(1,-1), npoints = 5000)
ggplot(dat, aes(x, y)) +
geom_line()
set.seed(1234)
dat <-
genFun(c(1,-1), npoints = 500)
dat %>%
ggplot(aes(x, y)) +
geom_point()
set.seed(1111)
dat <-
genFun(c(1,-1), npoints = 5000) %>%
mutate(rand_w = sample(n())/3000)
dat %>%
ggplot(aes(x, y)) +
geom_point(size = dat$rand_w) +
theme_void()
dat %>%
ggplot(aes(x, y)) +
geom_point(size = dat$rand_w,
shape = 8) +
theme_void()
set.seed(1234)
dat <-
dat %>%
mutate(rand_o = sample(n())/5000)
dat %>%
ggplot(aes(x, y)) +
geom_point(size = dat$rand_w,
alpha = dat$rand_o) +
theme_void()
set.seed(1234)
dat <-
dat %>%
mutate(rand_c = sample(n()))
dat %>%
ggplot(aes(x, y, color = rand_c)) +
geom_point(size = dat$rand_w,
alpha = dat$rand_o) +
scale_color_viridis(option = "magma") +
dark_theme_void() +
theme(legend.position = "none") # remove legend
library(viridis)
library(ggdark)
dat <-
dat %>%
mutate(rand_c = sample(n()))
dat %>%
ggplot(aes(x, y, color = rand_c)) +
geom_point(size = dat$rand_w,
alpha = dat$rand_o) +
scale_color_viridis(option = "magma") +
dark_theme_void() +
theme(legend.position = "none") # remove legend
genFun <- function(center = c(0, 0), npoints = 500, c1 = 2.5, c2 = -5, c3 = 4.28, c4 = 2.3, size_denom = 1, opacity_denom = 1, color_denom = 1){
t <- seq(0, 2*pi, length.out = npoints)
xx <- center[1] + c1*(sin(c2*t)*sin(c2*t))*(2^cos(cos(c3*c4*t)))
yy <- center[2] + c1*sin(sin(c2*t))*(cos(c3*c4*t)*cos(c3*c4*t))
rand_w <- sample(0:20, npoints, replace = TRUE)/size_denom
rand_o <- sample(1:100, npoints, replace = TRUE)/opacity_denom
rand_c <- sample(1:100, npoints, replace = TRUE)/color_denom
a <- data.frame(x = xx, y = yy, rand_w = rand_w, rand_o = rand_o, rand_c = rand_c)
return(a)
}
set.seed(1111)
dat <-
genFun(c(0, 0), npoints = 5000, c1 = 5, c2 = -3, c3 = 5, c4 = 2, size_denom = 1.5, opacity_denom = 50)
dat %>%
ggplot(aes(x, y, color = rand_c)) +
geom_point(size = dat$rand_w,
alpha = dat$rand_o) +
scale_color_viridis(option = "magma") +
dark_theme_void() +
theme(legend.position = "none") # remove legend
circleFun <- function(center = c(0, 0), diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
circleFun
dat <- circleFun(c(1, -1), 2.3, npoints = 100)
dat
ggplot(dat,aes(x, y)) + geom_path()
genFun <-
function(center = c(0, 0),
npoints = 500,
c1 = 2.5,
c2 = -5,
c3 = 4.28,
c4 = 2.3)
{
t <- seq(0, 2*pi, length.out = npoints)
xx <- center[1] + c1*(sin(c2*t)*sin(c2*t))*(2^cos(cos(c3*c4*t)))
yy <- center[2] + c1*sin(sin(c2*t))*(cos(c3*c4*t)*cos(c3*c4*t))
a <- data.frame(x = xx, y = yy)
return(a)
}
dat <- genFun(c(1,-1), npoints = 100)
dat
ggplot(dat, aes(x, y)) + geom_path()
dat <- genFun(c(1,-1), npoints = 500, c1 = 5, c2 = -3, c3 = 5, c4 = 2)
ggplot(dat, aes(x, y)) + geom_path()
setwd("C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io")
blogdown::check_site()
