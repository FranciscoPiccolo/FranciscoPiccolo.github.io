legend.title = element_blank(),
legend.position = "bottom"
)
}
path <- "C:/Users/fppicco/Desktop/R/Projects/forecast_study"
seasonal::seas(ts(us_retail_employment$Employed, start = 1990, frequency = 12), seats.noadmiss = "yes") %>%
feasts::autoplot()
x11_dcmp <-
us_retail_employment %>%
mutate(x11 = seasonal::seas(Employed, x11 = ""))
us_retail_employment %>%
model(feasts::classical_decomposition(Employed, type = "multiplicative")) %>%
components() %>%
feasts::autoplot() +
xlab("Year") +
ggtitle("Classical additive decomposition of total US retail employment")
us_retail_employment_ma <-
us_retail_employment %>%
mutate(ma_12 = slider::slide_vec(.x = Employed, .f = mean, .before = 12, .after = 0),
ma_2_t12 = slider::slide_vec(.x = ma_12, .f = mean, .before = 2, .after = 0))
us_retail_employment <- fpp3::us_employment %>%
filter(year(Month) >= 1990,
Title == "Retail Trade") %>%
select(-Series_ID)
us_retail_employment %>%
feasts::autoplot(Employed)+
xlab("Year")+
ylab("Persons (thousands")+
ggtitle("Total employment in US Retail")
dcmp <- us_retail_employment %>%
model(feasts::STL(Employed))
components(dcmp) %>% head(10)
us_retail_employment %>%
feasts::autoplot(Employed, color = "grey") +
feasts::autolayer(components(dcmp), trend, color = "red") +
xlab("Year") +
ylab("Persons (thousands)") +
ggtitle("Total employment in US Retail")
feasts::autoplot(components(dcmp))
us_retail_employment %>%
feasts::autoplot(Employed, color = "gray") +
feasts::autolayer(components(dcmp), season_adjust, color = "steel blue", size = 1.4) +
xlab("Year") +
ylab("Persons (thousands)") +
ggtitle("Total employment US retail")
tsibbledata::global_economy %>%
filter(Country == "Australia") %>%
feasts::autoplot(Exports) +
xlab("Year") +
ylab("% of GDP") +
ggtitle("Total Australian exports")
aus_exports <- tsibbledata::global_economy %>%
filter(Country == "Brazil") %>%
mutate(ma_5 = tsibble::slide_dbl(Exports, mean, .size = 5, .align = "right"),
ma_5_slider = slider::slide_vec(Exports, mean, .before = Inf, .after = 0),
ma_5_slider_2 = slider::slide_vec(Exports, mean, .before = Inf, .after = Inf))
aus_exports %>%
feasts::autoplot(Exports) +
feasts::autolayer(aus_exports, ma_5, color = "red") +
feasts::autolayer(aus_exports, ma_5_slider, color = "steel blue") +
feasts::autolayer(aus_exports, ma_5_slider_2, color = "dark orange") +
xlab("Year") +
ylab("Exports % of GDP") +
ggtitle("Total Australian exports")
teste_even_and_odd_orders <-
tsibbledata::global_economy %>%
filter(Country == "Brazil") %>%
mutate(ma_even_2 = slider::slide_vec(.x = Exports, .f = mean, .before = 2, .after = 0),
ma_even_4 = slider::slide_vec(.x = Exports, .f = mean, .before = 4, .after = 0),
ma_odd_3 = slider::slide_vec(.x = Exports, .f = mean, .before = 3, .after = 0))
teste_even_and_odd_orders %>%
feasts::autoplot(Exports) +
feasts::autolayer(teste_even_and_odd_orders, ma_even_2, color = "red") +
feasts::autolayer(teste_even_and_odd_orders, ma_even_4, color = "dark red") +
feasts::autolayer(teste_even_and_odd_orders, ma_odd_3, color = "dark orange")
a_vec <- data.frame(a = c(10,20,5,10,4,20,4))
a_vec %>%
mutate(ma_4 = round(slider::slide_vec(.x = a, .f = mean, .before = 4, .after = 0), digits = 2),
ma_2t_4 = round(slider::slide_vec(.x = ma_4, .f = mean, .before = 2, .after = 0), digits = 2))
us_retail_employment_ma <-
us_retail_employment %>%
mutate(ma_12 = slider::slide_vec(.x = Employed, .f = mean, .before = 12, .after = 0),
ma_2_t12 = slider::slide_vec(.x = ma_12, .f = mean, .before = 2, .after = 0))
us_retail_employment_ma %>%
autoplot(Employed, color = "gray") +
autolayer(us_retail_employment_ma, vars(ma_2_t12), color = "red") +
xlab("Year") +
ylab("Persons (thousands)") +
ggtitle("Total employment in US retail")
us_retail_employment %>%
model(feasts::classical_decomposition(Employed, type = "additive")) %>%
components() %>%
feasts::autoplot() +
xlab("Year") +
ggtitle("Classical additive decomposition of total US retail employment")
us_retail_employment %>%
model(feasts::classical_decomposition(Employed, type = "multiplicative")) %>%
components() %>%
feasts::autoplot() +
xlab("Year") +
ggtitle("Classical additive decomposition of total US retail employment")
x11_dcmp <-
us_retail_employment %>%
mutate(x11 = seasonal::seas(Employed, x11 = ""))
seasonal::seas(ts(us_retail_employment$Employed, start = 1990, frequency = 12), seats.noadmiss = "yes") %>%
feasts::autoplot()
global_economy %>%
head()
global_economy %>%
mutate(gdp_pc = GDP/Population) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = Year, y = gdp_pc, color = country))
global_economy %>%
mutate(gdp_pc = GDP/Population) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = Year, y = gdp_pc, color = Country))
global_economy %>%
head()
global_economy %>%
select(Count, Year, GDP, Population) %>%
mutate(last_year = max(Year)) %>%
head()
global_economy %>%
select(Country, Year, GDP, Population) %>%
mutate(last_year = max(Year)) %>%
head()
global_economy %>%
select(Country, Year, GDP, Population) %>%
group_by(Country) %>%
mutate(last_year = max(Year)) %>%
head()
global_economy %>%
select(Country, Year, GDP, Population) %>%
group_by(Country) %>%
summarise(last_year = max(Year)) %>%
View()
global_economy %>%
select(Country, Year, GDP, Population) %>%
group_by(Country) %>%
summarise(last_year = max(Year)) %>%
View()
global_economy %>%
#  select(Country, Year, GDP, Population) %>%
group_by(Country) %>%
summarise(last_year = max(Year)) %>%
View()
global_economy %>%
#  select(Country, Year, GDP, Population) %>%
group_by(Country) %>%
summarise(last_year = max(Year)) %>%
ungroup() %>%
View()
global_economy %>%
#  select(Country, Year, GDP, Population) %>%
group_by(Country) %>%
summarise(last_year = sum(Year)) %>%
View()
global_economy %>% str()
global_economy %>%
dplyr::group_by(Country) %>%
summarise(last_year = sum(Year)) %>%
View()
global_economy %>% as.data.frame() %>%
dplyr::group_by(Country) %>%
summarise(last_year = max(Year)) %>%
View()
global_economy %>% as.data.frame() %>%
dplyr::group_by(Country) %>%
summarise(last_year = max(Year)) %>%
ungroup() %>%
View()
global_economy %>% as.data.frame() %>%
filter(Year == max(as.data.frame(global_economy$Year))) %>%
View()
global_economy %>% as.data.frame() %>%
filter(Year == max(as.data.frame(global_economy$Year))) %>%
select(Country, GDP, Population) %>%
mutate(gdp_pc = GDP/Population) %>%
ggplot2::ggplot()+
geom_col(mapping = aes(x = Country, y = gdp_pc))+
coord_flip()
global_economy %>% as.data.frame() %>%
filter(Year == max(as.data.frame(global_economy$Year))) %>%
select(Country, GDP, Population) %>%
mutate(gdp_pc = GDP/Population) %>%
arrange(desc(gdp_pc)) %>%
mutate(Country = fct_reorder(Country, gdp_pc, .desc = F)) %>%
ggplot2::ggplot()+
geom_col(mapping = aes(x = Country, y = gdp_pc))+
coord_flip()
global_economy %>% as.data.frame() %>%
filter(Year == max(as.data.frame(global_economy$Year))) %>%
select(Country, GDP, Population) %>%
mutate(gdp_pc = GDP/Population) %>%
filter(gdp_pc > 0) %>%
arrange(desc(gdp_pc)) %>%
mutate(Country = fct_reorder(Country, gdp_pc, .desc = F)) %>%
ggplot2::ggplot()+
geom_col(mapping = aes(x = Country, y = gdp_pc))+
coord_flip()
global_economy %>% as.data.frame() %>%
filter(Year == max(as.data.frame(global_economy$Year))) %>%
select(Country, GDP, Population) %>%
mutate(gdp_pc = GDP/Population) %>%
filter(gdp_pc > 0) %>%
arrange(desc(gdp_pc)) %>%
head(50) %>%
mutate(Country = fct_reorder(Country, gdp_pc, .desc = F)) %>%
ggplot2::ggplot()+
geom_col(mapping = aes(x = Country, y = gdp_pc))+
coord_flip()
global_economy %>% as.data.frame() %>%
filter(Year == max(as.data.frame(global_economy$Year))) %>%
select(Country, GDP, Population) %>%
mutate(gdp_pc = GDP/Population) %>%
filter(gdp_pc > 0) %>%
arrange(desc(gdp_pc)) %>%
head(50) %>%
mutate(Country = fct_reorder(Country, gdp_pc, .desc = F)) %>%
ggplot2::ggplot()+
geom_col(mapping = aes(x = Country, y = gdp_pc), fill = "steel blue")+
coord_flip()+
theme_graph()+
labs(title = "Top 50 Countries of per Capita GDP")
global_economy %>% as.data.frame() %>%
filter(Year == max(as.data.frame(global_economy$Year))) %>%
select(Country, GDP, Population) %>%
mutate(gdp_pc = GDP/Population) %>%
filter(gdp_pc > 0) %>%
arrange(desc(gdp_pc)) %>%
head(50) %>%
mutate(Country = fct_reorder(Country, gdp_pc, .desc = F)) %>%
ggplot2::ggplot()+
geom_col(mapping = aes(x = Country, y = gdp_pc), fill = "steel blue")+
coord_flip()+
theme_graph()+
labs(title = "Top 50 Countries of per Capita GDP",
x = "",
y = "")
global_economy %>% as.data.frame() %>%
filter(Year == max(as.data.frame(global_economy$Year))) %>%
select(Country, GDP, Population) %>%
mutate(gdp_pc = GDP/Population) %>%
filter(gdp_pc > 0) %>%
arrange(desc(gdp_pc)) %>%
head(50) -> top_50_countries_on_per_capita_gdp
top_50_countries_on_per_capita_gdp %>%
mutate(Country = fct_reorder(Country, gdp_pc, .desc = F)) %>%
ggplot2::ggplot()+
geom_col(mapping = aes(x = Country, y = gdp_pc), fill = "steel blue")+
coord_flip()+
theme_graph()+
labs(title = "Top 50 Countries of per Capita GDP",
x = "",
y = "")
global_economy %>%
filter(Country %in% top_50_countries_on_per_capita_gdp$Country) %>%
head()
global_economy %>% as.data.frame() %>%
filter(Country %in% top_50_countries_on_per_capita_gdp$Country) %>%
mutate(gdp_pc = GDP/Population) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = Year, y = gdp_pc))
global_economy %>% as.data.frame() %>%
filter(Country %in% top_50_countries_on_per_capita_gdp$Country) %>%
mutate(gdp_pc = GDP/Population) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = Year, y = gdp_pc, color = Country))
global_economy %>% as.data.frame() %>%
filter(Country %in% top_50_countries_on_per_capita_gdp$Country) %>%
mutate(gdp_pc = GDP/Population) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = Year, y = gdp_pc, group = Country))
global_economy %>% as.data.frame() %>%
filter(Year == max(as.data.frame(global_economy$Year))) %>%
select(Country, GDP, Population) %>%
mutate(gdp_pc = GDP/Population) %>%
filter(gdp_pc > 0) %>%
arrange(desc(gdp_pc)) %>%
head(10) -> top_10_countries_on_per_capita_gdp
top_10_countries_on_per_capita_gdp %>%
mutate(Country = fct_reorder(Country, gdp_pc, .desc = F)) %>%
ggplot2::ggplot()+
geom_col(mapping = aes(x = Country, y = gdp_pc), fill = "steel blue")+
coord_flip()+
theme_graph()+
labs(title = "Top 50 Countries of per Capita GDP",
x = "",
y = "")
global_economy %>% as.data.frame() %>%
filter(Country %in% top_10_countries_on_per_capita_gdp$Country) %>%
mutate(gdp_pc = GDP/Population) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = Year, y = gdp_pc, group = Country))
global_economy %>% as.data.frame() %>%
filter(Country %in% top_10_countries_on_per_capita_gdp$Country) %>%
mutate(gdp_pc = GDP/Population) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = Year, y = gdp_pc, color = Country))+
scale_color_viridis_d()
global_economy %>% as.data.frame() %>%
filter(Country == "USA") %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = Year, y = GDP))
global_economy %>% as.data.frame() %>%
filter(Country == "USA") %>%
head()
global_economy %>% as.data.frame() %>%
filter(Country == "EUA") %>%
head()
global_economy %>% as.data.frame() %>%
head()
global_economy %>% as.data.frame() %>%
filter(Code == "EUA") %>%
head()
global_economy %>% as.data.frame() %>%
filter(Code == "USA") %>%
head()
global_economy %>% as.data.frame() %>%
filter(Code == "USA") %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = Year, y = GDP))
global_economy %>% as.data.frame() %>%
filter(Code == "USA") %>%
mutate(gdp_pc = GDP/Population) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = Year, y = gdp_pc))
global_economy %>% as.data.frame() %>%
filter(Code == "USA") %>%
feasts::autoplot()
global_economy %>% as.data.frame() %>%
filter(Code == "USA") %>%
as_tsibble() %>%
feasts::autoplot()
global_economy %>%
filter(Code == "USA") %>%
feasts::autoplot()
tsibledata::global_economy %>%
filter(Code == "USA") %>%
feasts::autoplot(GDP)
tsibbledata::global_economy %>%
filter(Code == "USA") %>%
feasts::autoplot(GDP)
tsibbledata::global_economy %>%
filter(Code == "USA") %>%
feasts::autoplot(GDP) %>%
feasts::autoplot(components(GDP))
tsibbledata::global_economy %>%
filter(Code == "USA") %>%
feasts::autoplot(components(GDP))
tsibbledata::global_economy %>%
filter(Code == "USA") %>%
feasts::autoplot(components(dcpm))
tsibbledata::global_economy %>%
filter(Code == "USA") %>%
feasts::autolayer(components(dcpm))
tsibbledata::global_economy %>%
filter(Code == "USA") %>%
feasts::autoplot(GDP)+
feasts::autolayer(components(dcpm))
tsibbledata::global_economy %>%
filter(Code == "USA") %>%
head()
tsibbledata::global_economy %>%
filter(Code == "USA") %>%
feasts::autoplot(GDP)
tsibbledata::global_economy %>%
filter(Code == "USA") %>%
feasts::autoplot(GDP) +
feasts::autolayer(components(GDP))
tsibbledata::global_economy %>%
filter(Code == "USA") %>%
feasts::autoplot(GDP) +
feasts::autolayer(components())
tsibbledata::global_economy %>%
filter(Code == "USA") %>%
feasts::autoplot(GDP) +
feasts::autolayer(components(model(feasts::STL(global_economy$GDP))))
dcpm <- global_economy %>%
model(feasts::STL(GDP))
dcpm
dcpm <- global_economy %>%
filter(Code == "USA") %>%
model(feasts::STL(GDP))
feasts::autolayer(components(dcpm))
feasts::autoplot(components(dcpm))
tsibbledata::aus_livestock %>%
head()
tsibbledata::aus_livestock %>%
feasts::autoplot(Count)
tsibbledata::aus_livestock %>%
as.data.frame() %>%
group_by(Month) %>%
summarise(count = sum(Count)) %>%
head()
tsibbledata::aus_livestock %>%
as.data.frame() %>%
group_by(Month) %>%
summarise(count = sum(Count)) %>%
feasts::autoplot(count)
tsibbledata::aus_livestock %>%
as.data.frame() %>%
group_by(Month) %>%
summarise(count = sum(Count)) %>%
as_tsibble() %>%
feasts::autoplot(count)
tsibbledata::aus_livestock %>%
as.data.frame() %>%
group_by(Month) %>%
summarise(count = sum(Count)) %>%
as_tsibble() -> aus_livestock_adj
aus_livestock_adj %>%
feasts::autoplot(count)
aus_livestock %>%
model(components(count)) %>%
feasts::autoplot()
aus_livestock %>%
model(components(count)) %>%
head()
aus_livestock %>%
model(feasts::STL(count)) %>%
head()
dcpm <-
aus_livestock %>%
model(feasts::STL(count))
feasts::autoplot(components(dcpm))
dcpm <-
aus_livestock %>%
model(feasts::STL(count))
dcpm
dcpm <-
aus_livestock_adj %>%
model(feasts::STL(count))
dcpm
aus_livestock_adj
dcpm <-
aus_livestock_adj %>%
model(feasts::STL(count))
dcpm
feasts::autoplot(components(dcpm))
tsibbledata::vic_elec %>%
head()
tsibbledata::vic_elec %>%
as.data.frame() %>%
group_by(Date, Holiday) %>%
summarise(demand = sum(Demand)) %>%
head()
tsibbledata::vic_elec %>%
as.data.frame() %>%
group_by(Date, Holiday) %>%
summarise(demand = sum(Demand)) %>%
as_tsibble() -> vic_ele_adj
vic_ele_adj %>%
model(feasts::STL(demand))
dcpm <- vic_ele_adj %>%
model(feasts::STL(demand))
feasts::autoplot(components(dcpm))
tourism_features <- tsibble::tourism %>%
fabletools::features(Trips, feature_set(pkgs = "feasts"))
tourism_features
tourism_features %>%
select_at(vars(contains("seasons"), Purpose)) %>%
mutate(seasonal_peak_year = glue::glue("Q{seasonal_peak_year+1}"),
seasonal_trough_year = glue::glue("Q{seasonal_trough_year+1}")) %>%
GGally::ggpairs(mapping = aes(color = "Purpose"))
tourism_features %>%
select_at(vars(contains("seasons"), Purpose)) %>%
mutate(seasonal_peak_year = glue::glue("Q{seasonal_peak_year+1}"),
seasonal_trough_year = glue::glue("Q{seasonal_trough_year+1}"),) %>%
GGally::ggpairs(mapping = aes(color = "Purpose"))
tourism_features %>%
select_at(vars(contains("season"), Purpose)) %>%
mutate(
seasonal_peak_year = glue::glue("Q{seasonal_peak_year+1}"),
seasonal_trough_year = glue::glue("Q{seasonal_trough_year+1}"),
) %>%
GGally::ggpairs(mapping = aes(colour=Purpose))
tourism_features %>%
select_at(vars(contains("seasons"), Purpose)) %>%
mutate(seasonal_peak_year = glue::glue("Q{seasonal_peak_year+1}"),
seasonal_trough_year = glue::glue("Q{seasonal_trough_year+1}")) %>%
GGally::ggpairs(mapping = aes(color = Purpose))
install.packages("blogdown")
install.packages("blogdown")
setwd("C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io")
blogdown::build_site()
library(blogdown)
update.packages(blogdown)
update.packages("blogdown")
update("xfun")
update.packages("xfun")
package_version(xfun)
package_version("xfun")
blogdown::build_site()
install.packages("knitr")
install.packages("knitr")
blogdown::build_site()
package_version(xfun)
install.packages("xfun")
install.packages("xfun")
package_version(xfun)
package_version("xfun")
package_version("xfun")
blogdown::build_site()
.libPaths()
package_version(xfun)
package_version("xfun")
package_version(ggplot)
package_version("ggplot")
package_version("ggplot2")
packageVersion("ggplot2")
packageVersion("xfun")
