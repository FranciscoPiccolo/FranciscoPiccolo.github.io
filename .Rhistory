labs(title = "Verificando Visualmente a Performance dos Modelos")
g2 <-
forecasting %>%
filter(.model %in% c("mean","naive","snaive","drift")) %>%
feasts::autoplot(train_dataset,
level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
labs(x = "",
y = "")
g1+g2
# Plotando os resultados
g1 <-
forecasting %>%
filter(.model %in% c("mean","naive","snaive","drift")) %>%
feasts::autoplot(level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()
g2 <-
forecasting %>%
filter(.model %in% c("mean","naive","snaive","drift")) %>%
feasts::autoplot(train_dataset,
level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
labs(x = "",
y = "")
g1+g2 + patchwork::plot_annotation(
title = "Verificando Visualmente a Performance dos Modelos"
)
# Criando os modelos
model_fit <-
train_dataset %>%
model(
mean = fable::MEAN(Bricks),
naive = fable::NAIVE(Bricks),
snaive = fable::SNAIVE(Bricks),
drift = fable::RW(Bricks ~ drift()),
simp_exp_smooth = fable::ETS(Bricks ~ error("A") + trend("N") + season("N")),
holt_linear_trend = fable::ETS(Bricks ~ error("A") + trend("A") + season("N")),
holt_damped_trend = fable::ETS(Bricks ~ error("A") + trend("Ad", phi = .9) + season("N")),
holt_winter_season_add = fable::ETS(Bricks ~ error("A") + trend("A") + season("A")),
holt_winter_season_mult = fable::ETS(Bricks ~ error("A") + trend("A") + season("M"))
)
# Gerando as previsões para os próximos 22 períodos (quarters), até 2005 Q2
forecasting <- model_fit %>%
forecast::forecast(h = 22)
# Plotando os resultados
g1 <-
forecasting %>%
filter(.model %in% c("simp_exp_smooth",
"holt_linear_trend",
"holt_damped_trend",
"holt_winter_season_add",
"holt_winter_season_mult")) %>%
feasts::autoplot(level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()
g2 <-
forecasting %>%
filter(.model %in% c("simp_exp_smooth",
"holt_linear_trend",
"holt_damped_trend",
"holt_winter_season_add",
"holt_winter_season_mult")) %>%
feasts::autoplot(train_dataset,
level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
labs(x = "",
y = "")
g1+g2 + patchwork::plot_annotation(
title = "Verificando Visualmente a Performance dos Modelos"
)
forecasting %>%
filter(.model %in% c("simp_exp_smooth",
"holt_linear_trend",
"holt_damped_trend",
"holt_winter_season_add",
"holt_winter_season_mult")) %>%
View()
# Criando os modelos
model_fit <-
train_dataset %>%
model(
mean = fable::MEAN(Bricks),
naive = fable::NAIVE(Bricks),
snaive = fable::SNAIVE(Bricks),
drift = fable::RW(Bricks ~ drift()),
simp_exp_smooth = fable::ETS(Bricks ~ error("A") + trend("N") + season("N")),
holt_linear_trend = fable::ETS(Bricks ~ error("A") + trend("A") + season("N")),
holt_damped_trend = fable::ETS(Bricks ~ error("A") + trend("Ad", phi = .9) + season("N")),
holt_winter_season_add = fable::ETS(Bricks ~ error("A") + trend("A") + season("A"))
#holt_winter_season_mult = fable::ETS(Bricks ~ error("A") + trend("A") + season("M"))
)
# Gerando as previsões para os próximos 22 períodos (quarters), até 2005 Q2
forecasting <- model_fit %>%
forecast::forecast(h = 22)
# Criando os modelos
model_fit <-
train_dataset %>%
model(
mean = fable::MEAN(Bricks),
naive = fable::NAIVE(Bricks),
snaive = fable::SNAIVE(Bricks),
drift = fable::RW(Bricks ~ drift()),
simp_exp_smooth = fable::ETS(Bricks ~ error("A") + trend("N") + season("N")),
holt_linear_trend = fable::ETS(Bricks ~ error("A") + trend("A") + season("N")),
holt_damped_trend = fable::ETS(Bricks ~ error("A") + trend("Ad", phi = .9) + season("N")),
holt_winter_season_add = fable::ETS(Bricks ~ error("A") + trend("A") + season("A"))
)
# Gerando as previsões para os próximos 22 períodos (quarters), até 2005 Q2
forecasting <- model_fit %>%
forecast::forecast(h = 22)
# Plotando os resultados
g1 <-
forecasting %>%
filter(.model %in% c("mean","naive","snaive","drift")) %>%
feasts::autoplot(level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()
g2 <-
forecasting %>%
filter(.model %in% c("mean","naive","snaive","drift")) %>%
feasts::autoplot(train_dataset,
level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
labs(x = "",
y = "")
g1+g2 + patchwork::plot_annotation(
title = "Verificando Visualmente a Performance dos Modelos"
)
# Plotando os resultados
g1 <-
forecasting %>%
filter(.model %in% c("simp_exp_smooth",
"holt_linear_trend",
"holt_damped_trend",
"holt_winter_season_add",
"holt_winter_season_mult")) %>%
feasts::autoplot(level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()
g2 <-
forecasting %>%
filter(.model %in% c("simp_exp_smooth",
"holt_linear_trend",
"holt_damped_trend",
"holt_winter_season_add",
"holt_winter_season_mult")) %>%
feasts::autoplot(train_dataset,
level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
labs(x = "",
y = "")
g1+g2 + patchwork::plot_annotation(
title = "Verificando Visualmente a Performance dos Modelos"
)
# Plotando os resultados
g1 <-
forecasting %>%
filter(.model %in% c("simp_exp_smooth",
"holt_linear_trend",
"holt_damped_trend",
"holt_winter_season_add",
"holt_winter_season_mult")) %>%
feasts::autoplot(level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
theme(legend.position = "none")
g2 <-
forecasting %>%
filter(.model %in% c("simp_exp_smooth",
"holt_linear_trend",
"holt_damped_trend",
"holt_winter_season_add",
"holt_winter_season_mult")) %>%
feasts::autoplot(train_dataset,
level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
labs(x = "",
y = "")
g1+g2 + patchwork::plot_annotation(
title = "Verificando Visualmente a Performance dos Modelos"
)
g2 <-
forecasting %>%
filter(.model %in% c("simp_exp_smooth",
"holt_linear_trend",
"holt_damped_trend",
"holt_winter_season_add",
"holt_winter_season_mult")) %>%
feasts::autoplot(train_dataset,
level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
theme(legend.position = "right")+
labs(x = "",
y = "")
g1+g2 + patchwork::plot_annotation(
title = "Verificando Visualmente a Performance dos Modelos"
)
g1/g2 + patchwork::plot_annotation(
title = "Verificando Visualmente a Performance dos Modelos"
)
# Plotando os resultados
g1 <-
forecasting %>%
filter(.model %in% c("mean","naive","snaive","drift")) %>%
feasts::autoplot(level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
theme(legend.position = "none")
g2 <-
forecasting %>%
filter(.model %in% c("mean","naive","snaive","drift")) %>%
feasts::autoplot(train_dataset,
level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
theme(legend.position = "right")+
labs(x = "",
y = "")
g1/g2 + patchwork::plot_annotation(
title = "Verificando Visualmente a Performance dos Modelos"
)
# Plotando os resultados
g1 <-
forecasting %>%
filter(.model %in% c("simp_exp_smooth",
"holt_linear_trend",
"holt_damped_trend",
"holt_winter_season_add",
"holt_winter_season_mult")) %>%
feasts::autoplot(level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
theme(legend.position = "none")
g2 <-
forecasting %>%
filter(.model %in% c("simp_exp_smooth",
"holt_linear_trend",
"holt_damped_trend",
"holt_winter_season_add",
"holt_winter_season_mult")) %>%
feasts::autoplot(train_dataset,
level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
theme(legend.position = "right")+
labs(x = "",
y = "")
g1/g2 + patchwork::plot_annotation(
title = "Verificando Visualmente a Performance dos Modelos"
)
# Criando os modelos
model_fit <-
train_dataset %>%
model(
mean = fable::MEAN(Bricks),
naive = fable::NAIVE(Bricks),
snaive = fable::SNAIVE(Bricks),
drift = fable::RW(Bricks ~ drift()),
simp_exp_smooth = fable::ETS(Bricks ~ error("A") + trend("N") + season("A")),
holt_linear_trend = fable::ETS(Bricks ~ error("A") + trend("A") + season("N")),
holt_damped_trend = fable::ETS(Bricks ~ error("A") + trend("Ad", phi = .9) + season("A")),
holt_winter_season_add = fable::ETS(Bricks ~ error("A") + trend("A") + season("A"))
)
# Gerando as previsões para os próximos 22 períodos (quarters), até 2005 Q2
forecasting <- model_fit %>%
forecast::forecast(h = 22)
# Plotando os resultados
g1 <-
forecasting %>%
filter(.model %in% c("mean","naive","snaive","drift")) %>%
feasts::autoplot(level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
theme(legend.position = "none")
g2 <-
forecasting %>%
filter(.model %in% c("mean","naive","snaive","drift")) %>%
feasts::autoplot(train_dataset,
level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
theme(legend.position = "right")+
labs(x = "",
y = "")
g1/g2 + patchwork::plot_annotation(
title = "Verificando Visualmente a Performance dos Modelos"
)
# Plotando os resultados
g1 <-
forecasting %>%
filter(.model %in% c("simp_exp_smooth",
"holt_linear_trend",
"holt_damped_trend",
"holt_winter_season_add",
"holt_winter_season_mult")) %>%
feasts::autoplot(level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
theme(legend.position = "none")
g2 <-
forecasting %>%
filter(.model %in% c("simp_exp_smooth",
"holt_linear_trend",
"holt_damped_trend",
"holt_winter_season_add",
"holt_winter_season_mult")) %>%
feasts::autoplot(train_dataset,
level = NULL,
size = 1)+
feasts::autolayer(test_dataset,
color = "black",
size = 1)+
scale_color_brewer(type = "qual", palette = 2)+
theme_graph()+
theme(legend.position = "right")+
labs(x = "",
y = "")
g1/g2 + patchwork::plot_annotation(
title = "Verificando Visualmente a Performance dos Modelos"
)
# Primeiro chame o pacote 'readr' que contém a função 'read_csv'
library(readr)
dataset_path <- "https://raw.githubusercontent.com/FranciscoPiccolo/franciscopiccolo.github.io/master/datasets/2020-03-01-basic_econometrics_by_gujarati/"
library(tidyverse)
library(patchwork)
library(gt)
library(modelsummary)
library(stringr)
# Função para padronizar o design dos gráficos
theme_graph <- function(){
theme(
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(face = "italic", size = 9),
axis.text = element_text(size = 9),
axis.title = element_text(face = "italic", size = 9),
strip.background = element_rect(fill = "grey"),
strip.text = element_text(face = "bold"),
legend.position = "bottom",
legend.title = element_blank()
)
}
table_1.3_cpi <-
readr::read_delim(file = paste(dataset_path,
"table_1.3_cpi.txt",
sep = ""),
delim = " ") %>%
mutate(year = as.character(year))
table_1.3_cpi %>%
head(5) %>%
knitr::kable(format.args = list(big.mark = ".", decimal.mark = "."))
# Este arquivo está separado por ';' ao invés de '\tab'
table_2.7_labour_market <-
readr::read_delim(file = paste(dataset_path,
"table_2.7_labour_market.txt",
sep = ""),
delim = " ")
table_2.7_labour_market
# Amostra do dataset
table_2.7_labour_market %>%
head(5) %>%
knitr::kable(format.args = list(big.mark = ".", decimal.mark = ","))
table_2.7_labour_market %>%
head()
table_2.7_labour_market %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = share_men_workforce, y = unemployment_men))
table_2.7_labour_market %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = share_men_work_force, y = unemployment_men))
table_2.7_labour_market %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = share_men_work_force, y = unemployment_men))+
theme_graph()+
labs(title = "Relação entre Participação na Força de Trabalho e Taxa de Desemprego")
table_2.7_labour_market %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = share_men_work_force, y = unemployment_men))+
theme_graph()+
labs(title = "Relação entre Participação na Força de Trabalho e Taxa de Desemprego",
x = "Participação no mercado de trabalho",
y = "Taxa de Desemprego")
table_2.7_labour_market %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = share_men_work_force, y = unemployment_men))+
theme_graph()+
labs(title = "Relação entre Participação na Força de Trabalho e Taxa de Desemprego",
x = "Participação (%) no mercado de trabalho",
y = "Taxa (%) de Desemprego")
table_2.7_labour_market %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = share_women_work_force, y = unemployment_women))+
theme_graph()+
labs(title = "Relação entre Participação na Força de Trabalho e Taxa de Desemprego",
x = "Participação (%) no mercado de trabalho",
y = "Taxa (%) de Desemprego")
table_2.7_labour_market %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = share_men_work_force, y = unemployment_men))+
theme_graph()+
labs(title = "Relação entre Participação na Força de Trabalho e Taxa de Desemprego",
subtitle = "Para os Homens",
x = "Participação (%) no mercado de trabalho",
y = "Taxa (%) de Desemprego")
table_2.7_labour_market %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = share_women_work_force, y = unemployment_women))+
theme_graph()+
labs(title = "Relação entre Participação na Força de Trabalho e Taxa de Desemprego",
subtitle = "Para as Mulheres",
x = "Participação (%) no mercado de trabalho",
y = "Taxa (%) de Desemprego")
setwd("C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io")
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blog
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
