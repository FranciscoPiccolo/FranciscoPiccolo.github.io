dataset_1 %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = monthly_earning, y = residuals), shape = 20)+
scale_y_log10()+
scale_x_log10()+
labs(title = "Comparando os resíduos com a Renda Mensal",
x = "Renda Mensal",
y = "Resíduos")
# Criando variável com resultado do modelo de regressão múltipla
dataset_1 %>%
filter(monthly_earning > 0) -> dataset_1
dataset_1 %>%
mutate(dummy_race = case_when(race == "branco" ~ 1,
TRUE ~ 0)) %>%
lm(formula = monthly_earning ~ (years_of_study + dummy_race)) -> final_model
final_model %>%
summary() %>%
pander::pander()
dataset_1 %>%
mutate(dummy_race = case_when(race == "branco" ~ 1,
TRUE ~ 0)) %>%
lm(formula = monthly_earning ~ (years_of_study)) -> final_model
final_model %>%
summary() %>%
pander::pander()
dataset_1 <- readxl::read_excel(path = "C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io/datasets/2020-12-06-trabalho-econometria-gabriela/dataset_1.xlsx")
# Criando variável com resultado do modelo de regressão múltipla
dataset_1 %>%
filter(monthly_earning > 0) -> dataset_1
dataset_1 %>%
mutate(dummy_race = case_when(race == "branco" ~ 1,
TRUE ~ 0)) %>%
lm(formula = monthly_earning ~ (years_of_study + dummy_race)) -> final_model
final_model %>%
summary() %>%
pander::pander()
# Adicionando os valores estimados ao dataset original
dataset_1$fitted_2 <- final_model$fitted.values
# Plotando os resultados
dataset_1 %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = monthly_earning, y = fitted_2), shape = 20)+
scale_x_log10()+
labs(title = "Comparando previsão com valores originais",
x = "Rendimento Mensal",
y = "Estimativa do rendimento mensal")
# Adicionando os resíduos no dataset original
dataset_1$residuals <- final_model$residuals
dataset_1 %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = monthly_earning, y = residuals), shape = 20)+
scale_y_log10()+
scale_x_log10()+
labs(title = "Comparando os resíduos com a Renda Mensal",
x = "Renda Mensal",
y = "Resíduos")
dataset_1 <- readxl::read_excel(path = "C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io/datasets/2020-12-06-trabalho-econometria-gabriela/dataset_1.xlsx")
# Criando variável com resultado do modelo de regressão múltipla
dataset_1 %>%
filter(monthly_earning > 0) -> dataset_1
dataset_1 %>%
mutate(dummy_race = case_when(race == "branco" ~ 1,
TRUE ~ 0)) %>%
lm(formula = monthly_earning ~ (years_of_study + dummy_race)) -> final_model
final_model %>%
summary() %>%
pander::pander()
# Adicionando os valores estimados ao dataset original
dataset_1$fitted_2 <- final_model$fitted.values
# Plotando os resultados
dataset_1 %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = monthly_earning, y = fitted_2), shape = 20)+
scale_x_log10()+
labs(title = "Comparando previsão com valores originais",
x = "Rendimento Mensal",
y = "Estimativa do rendimento mensal")
# Adicionando os resíduos no dataset original
dataset_1$residuals <- final_model$residuals
dataset_1 %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = monthly_earning, y = residuals), shape = 20)+
scale_y_log10()+
scale_x_log10()+
labs(title = "Comparando os resíduos com a Renda Mensal",
x = "Renda Mensal",
y = "Resíduos")
dataset_1 <- readxl::read_excel(path = "C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io/datasets/2020-12-06-trabalho-econometria-gabriela/dataset_1.xlsx")
# Criando variável com resultado do modelo de regressão múltipla
dataset_1 %>%
filter(monthly_earning > 0) -> dataset_1
dataset_1 %>%
mutate(dummy_race = case_when(race == "branco" ~ 1,
TRUE ~ 0)) %>%
lm(formula = monthly_earning ~ (years_of_study + dummy_race)) -> final_model
final_model %>%
summary() %>%
pander::pander()
# Adicionando os valores estimados ao dataset original
dataset_1$fitted_2 <- final_model$fitted.values
# Plotando os resultados
dataset_1 %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = monthly_earning, y = fitted_2), shape = 20)+
scale_x_log10()+
labs(title = "Comparando previsão com valores originais",
x = "Rendimento Mensal",
y = "Estimativa do rendimento mensal")
# Adicionando os resíduos no dataset original
dataset_1$residuals <- final_model$residuals
dataset_1 %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = monthly_earning, y = residuals), shape = 20)+
scale_y_log10()+
scale_x_log10()+
labs(title = "Comparando os resíduos com a Renda Mensal",
x = "Renda Mensal",
y = "Resíduos")
dataset_1 %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = monthly_earning, y = residuals), shape = 20)+
scale_y_log10()+
scale_x_log10()+
labs(title = "Comparando os resíduos com a Renda Mensal",
x = "Renda Mensal",
y = "Resíduos")
install.packages("datarium")
library(datarium)
datarium::marketing %>%
head()
datarium::marketing %>%
dim()
datarium::marketing %>%
GGally::ggpairs()
datarium::marketing %>%
lm(formula = sales ~ youtube + facebook + newspaper) -> regression_model
regression_model %>%
summary() %>%
pander::pander()
library(tidyverse)  # Para chamar o pacote
library(patchwork)
library(readxl)
library(GGally)
library(feasts)
library(datarium)
datarium::marketing %>%
head(10) %>%
as_tsibble()
datarium::marketing %>%
head(10) %>%
as.tibble()
datarium::marketing %>%
lm(formula = sales ~ youtube + facebook + newspaper) -> regression_model
regression_model %>%
summary() %>%
pander::pander()
dataset <- datarium::marketing
# Salvando o modelo na variável 'regression_model'
dataset %>%
lm(formula = sales ~ youtube + facebook + newspaper) -> regression_model
regression_model %>%
summary() %>%
pander::pander()
dataset$fitted <- regression_model$fitted.values
dataset$residuals <- regression_model$residuals
dataset %>%
head()
dataset %>%
mutate(rows = seq(1, 200, by = 1)) %>%
head()
dataset %>%
mutate(rows = seq(1, 200, by = 1)) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = rows, y = sales, color = "Actual sales"))+
geom_line(mapping = aes(x = rows, y = fitted, color = "Predicted sales"))+
scale_color_manual(values = c("Actual sales" = "steel blue",
"Predicted sales" = "dark orange"),
name = "Teste")
dataset %>%
mutate(rows = seq(1, 200, by = 1)) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = rows, y = sales, color = "Actual sales"))+
geom_line(mapping = aes(x = rows, y = fitted, color = "Predicted sales"))+
scale_color_manual(values = c("Actual sales" = "steel blue",
"Predicted sales" = "dark orange"),
name = "")+
labs(title = "Validação dos valores atuais e projetados",
x = "",
y = "")
datarium::marketing %>%
GGally::ggpairs()
dataset %>%
mutate(rows = seq(1, 200, by = 1)) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = rows, y = sales, color = "Actual sales"))+
geom_line(mapping = aes(x = rows, y = fitted, color = "Predicted sales"))+
scale_color_manual(values = c("Actual sales" = "steel blue",
"Predicted sales" = "dark orange"),
name = "")+
theme(legend.position = "botton")+
labs(title = "Valida??o dos valores atuais e projetados",
x = "",
y = "")
dataset %>%
mutate(rows = seq(1, 200, by = 1)) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = rows, y = sales, color = "Actual sales"))+
geom_line(mapping = aes(x = rows, y = fitted, color = "Predicted sales"))+
scale_color_manual(values = c("Actual sales" = "steel blue",
"Predicted sales" = "dark orange"),
name = "")+
theme(legend.position = "bottom")+
labs(title = "Valida??o dos valores atuais e projetados",
x = "",
y = "")
dataset %>%
head()
dataset %>%
ggplot2::ggplot()+
geom_histogram(mapping = aes(x = residuals))
dataset %>%
ggplot2::ggplot()+
geom_histogram(mapping = aes(x = residuals))+
labs(title = "Distribuição dos resíduos")
datarium::marketing %>%
write.csv(file = "C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io/content/wip-draft/dataset.csv")
library(tidyverse)
library(zoo)
library(rJava)
library(RJDBC)
library(readr)
library(stringr)
library(patchwork)
library(glue)
library(data.table)
library(tsibble)
library(feasts)
# Establishing graph theme
theme_graph <- function(){
theme(
plot.title = element_text(size = 14),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(face = "italic", size = 9),
axis.text = element_text(size = 9),
axis.title = element_text(face = "italic", size = 9),
strip.background = element_rect(fill = "grey"),
strip.text = element_text(face = "bold"),
legend.title = element_blank(),
legend.position = "bottom"
)
}
# Cluster connection
db_variables <- read.table(file = "C:\\Users\\fppicco\\Desktop\\R\\dw_access\\brscdb.txt",
sep = " ")
sprint <- db_variables[1,2]
driver_class <- db_variables[2,2]
host <- db_variables[3,2]
dw <- db_variables[4,2]
port <- db_variables[5,2]
user <- db_variables[6,2]
pswd <- db_variables[7,2]
driver <- RJDBC::JDBC(driverClass = driver_class,
classPath = Sys.glob("C:/Users/fppicco/Desktop/R/Java/RedshiftJDBC42-no-awssdk-1.2.43.1067.jar"),
identifier.quote="`")
db_connection <- sprintf(sprint, host, port, dw)
access <- RJDBC::dbConnect(driver, db_connection, user, pswd)
q1 <- RJDBC::dbGetQuery(access,"SELECT
dataset_date
, metric
, sum(value) AS value
FROM sandop.sop_actuals_pl_st_fc
WHERE 1 = 1
AND region_id = 5
AND PERIOD = 'DAILY'
AND scope = 'BR'
AND metric IN ('NewToDock','NewVendorFreight')
AND node IN ('GRU5','XBRA','XBRB','XBRT','XBRZ','CNF1','BSB1','POA1','GRU6')
GROUP BY 1,2
ORDER BY 1 DESC
")
q1$dataset_date <- lubridate::ymd(q1$dataset_date)
q1 %>%
head()
q1 <- RJDBC::dbGetQuery(access,"SELECT
dataset_date::date
, metric
, sum(value) AS value
FROM sandop.sop_actuals_pl_st_fc
WHERE 1 = 1
AND region_id = 5
AND PERIOD = 'DAILY'
AND scope = 'BR'
AND metric IN ('NewToDock','NewVendorFreight')
AND node IN ('GRU5','XBRA','XBRB','XBRT','XBRZ','CNF1','BSB1','POA1','GRU6')
GROUP BY 1,2
ORDER BY 1 DESC
")
q1$dataset_date <- lubridate::ymd(q1$dataset_date)
q1 %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = dataset_date, y = value, group = metric, color = metric))
q1 <- RJDBC::dbGetQuery(access,"SELECT
ord.calendar_year AS YEAR
, ord.calendar_month_of_year
, dataset_date::date
, metric
, sum(value) AS value
FROM sandop.sop_actuals_pl_st_fc
INNER JOIN booker.o_reporting_days AS ord
ON ord.calendar_day = dataset_date::date
WHERE 1 = 1
AND region_id = 5
AND PERIOD = 'DAILY'
AND scope = 'BR'
AND metric IN ('NewToDock','NewVendorFreight')
AND node IN ('GRU5','XBRA','XBRB','XBRT','XBRZ','CNF1','BSB1','POA1','GRU6')
GROUP BY 1,2,3,4
ORDER BY 1 DESC
")
q1$dataset_date <- lubridate::ymd(q1$dataset_date)
q1 %>%
head()
q1 %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = dataset_date, y = value, group = metric, color = metric))+
facet_wrap(~month)
q1 %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = dataset_date, y = value, group = metric, color = metric))+
facet_wrap(~calendar_month_of_year)
q1 <- RJDBC::dbGetQuery(access,"SELECT
dataset_date::date
, metric
, sum(value) AS value
FROM sandop.sop_actuals_pl_st_fc
WHERE 1 = 1
AND region_id = 5
AND PERIOD = 'DAILY'
AND scope = 'BR'
AND metric IN ('NewToDock','NewVendorFreight')
AND node IN ('GRU5','XBRA','XBRB','XBRT','XBRZ','CNF1','BSB1','POA1','GRU6')
GROUP BY 1,2
ORDER BY 1 DESC
")
q1$dataset_date <- lubridate::ymd(q1$dataset_date)
q1 %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = dataset_date, y = value, group = metric, color = metric))+
facet_wrap()
q1 %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = dataset_date, y = value, group = metric, color = metric))
q1 %>%
head()
q1 %>%
tidyr::spread(metric, value) %>%
head()
q1 %>%
filter(value > 0,
!is.na(value)) %>%
head()
q1 %>%
filter(value > 0,
!is.na(value)) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = dataset_date, y = value, group = metric, color = metric))
q1 %>%
filter(value > 0,
!is.na(value)) %>%
tidyr::spread(metric, value) %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = NewVendorFreight, y = NewToDock))
q1 <- RJDBC::dbGetQuery(access,"SELECT
dataset_date::date
, node
, metric
, sum(value) AS value
FROM sandop.sop_actuals_pl_st_fc
WHERE 1 = 1
AND region_id = 5
AND PERIOD = 'DAILY'
AND scope = 'BR'
AND metric IN ('NewToDock','NewVendorFreight')
AND node IN ('GRU5','XBRA','XBRB','XBRT','XBRZ','CNF1','BSB1','POA1','GRU6')
GROUP BY 1,2,3
ORDER BY 1 DESC
")
ggplot2::ggplot()+
geom_line(mapping = aes(x = dataset_date, y = value, group = metric, color = metric))
q1 %>%
filter(value > 0,
!is.na(value)) %>%
group_by(dataset_date, metric) %>%
summarise(value = sum(value))
q1 %>%
filter(value > 0,
!is.na(value)) %>%
group_by(dataset_date, metric) %>%
summarise(value = sum(value)) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = dataset_date, y = value, group = metric, color = metric))
q1$dataset_date <- lubridate::ymd(q1$dataset_date)
q1 %>%
filter(value > 0,
!is.na(value)) %>%
group_by(dataset_date, metric) %>%
summarise(value = sum(value)) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = dataset_date, y = value, group = metric, color = metric))
q1 %>%
filter(value > 0,
!is.na(value)) %>%
tidyr::spread(metric, value) %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = NewVendorFreight, y = NewToDock))+
facet_wrap(~node)
q1 %>%
filter(value > 0,
!is.na(value)) %>%
tidyr::spread(metric, value) %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = NewVendorFreight, y = NewToDock), shape = 20)+
facet_wrap(~node)
q1 %>%
filter(value > 0,
!is.na(value)) %>%
group_by(dataset_date, metric) %>%
summarise(value = sum(value)) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = dataset_date, y = value, group = metric, color = metric))
q1 %>%
filter(value > 0,
!is.na(value)) %>%
#group_by(dataset_date, metric) %>%
#summarise(value = sum(value)) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = dataset_date, y = value, group = metric, color = metric))+
facet_wrap(~node)
q1 %>%
filter(value > 0,
!is.na(value)) %>%
#group_by(dataset_date, metric) %>%
#summarise(value = sum(value)) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = dataset_date, y = value, group = metric, color = metric), alpha = .3)+
facet_wrap(~node)
q1 %>%
filter(value > 0,
!is.na(value)) %>%
mutate(month = month(dataset_date)) %>%
head()
q1 %>%
filter(value > 0,
!is.na(value),
year(dataset_date) == 2020) %>%
mutate(month = month(dataset_date)) %>%
group_by(month, metric, node) %>%
summarise(value = sum(value)) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = month, y = value, group = metric, color = metric), alpha = .3)+
facet_wrap(~node)
q1 %>%
filter(value > 0,
!is.na(value),
year(dataset_date) == 2020) %>%
mutate(month = month(dataset_date)) %>%
group_by(month, metric, node) %>%
summarise(value = sum(value)) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = month, y = value, group = metric, color = metric), alpha = .9)+
facet_wrap(~node)
q1 %>%
filter(value > 0,
!is.na(value),
year(dataset_date) == 2020) %>%
mutate(month = month(dataset_date),
week = week(dataset_date)) %>%
head()
q1 %>%
filter(value > 0,
!is.na(value),
year(dataset_date) == 2020) %>%
mutate(month = month(dataset_date),
week = week(dataset_date)) %>%
group_by(week, metric, node) %>%
summarise(value = sum(value)) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = week, y = value, group = metric, color = metric), alpha = .9)+
facet_wrap(~node)
setwd("C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
setwd("C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io")
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
