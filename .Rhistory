c2s_wt = sum(c2s_wt),
total_units = sum(total_units)) %>%
mutate(c2p = c2pdd_wt/total_units,
c2s = c2s_wt/total_units) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = year_and_week, y = c2p, color = as.character(is_ideal_fc_choose), group = is_ideal_fc_choose))+
scale_x_discrete(breaks = c("2020|02","2020|10","2020|20","2020|30","2020|40","2020|48"))+
facet_grid(region~effective_cluster)
q1 %>%
filter(!region == "missing",
year == 2020) %>%
group_by(year_and_week, effective_cluster, region, is_ideal_fc_choose) %>%
summarise(c2pdd_wt = sum(c2pdd_wt),
c2s_wt = sum(c2s_wt),
total_units = sum(total_units)) %>%
mutate(c2p = c2pdd_wt/total_units,
c2s = c2s_wt/total_units) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = year_and_week, y = c2p, color = as.character(is_ideal_fc_choose), group = is_ideal_fc_choose))+
scale_x_discrete(breaks = c("2020|02","2020|10","2020|20","2020|30","2020|40","2020|48"))+
facet_grid(region~effective_cluster)
q1 %>%
group_by(year_and_week) %>%
summarise(units_ideal_fc_choose = sum(units_ideal_fc_choose),
total_units = sum(total_units)) %>%
mutate(fulfill_rate = units_ideal_fc_choose/total_units) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = year_and_week, y = fulfill_rate, group = 1))+
scale_x_discrete(breaks = c("2019|10","2019|25","2019|40","2020|02","2020|10","2020|20","2020|30","2020|40","2020|48"))+
scale_y_continuous(labels = scales::percent, limits = c(0,1))+
theme_graph()+
labs(title = "Fulfill Rate",
subtitle = "% units shipped from Ideal FC",
y = "",
x = "Year / Week (Ship Date)")
q1 %>%
group_by(year_and_week, effective_cluster) %>%
summarise(units_ideal_fc_choose = sum(units_ideal_fc_choose),
total_units = sum(total_units)) %>%
mutate(fulfill_rate = units_ideal_fc_choose/total_units) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = year_and_week, y = fulfill_rate, group = 1))+
scale_x_discrete(breaks = c("2019|10","2019|25","2019|40","2020|02","2020|10","2020|20","2020|30","2020|40","2020|48"))+
scale_y_continuous(labels = scales::percent, limits = c(0,1))+
theme_graph()+
theme(axis.text.x = element_text(angle = 45))+
labs(title = "Fulfill Rate per FC",
subtitle = "% units shipped from Ideal FC",
y = "",
x = "Year / Week (Ship Date)")+
facet_wrap(~effective_cluster)
q1 %>%
filter(year == 2020) %>%
group_by(year_and_week, effective_cluster) %>%
summarise(units_ideal_fc_choose = sum(units_ideal_fc_choose),
total_units = sum(total_units)) %>%
mutate(fulfill_rate = units_ideal_fc_choose/total_units) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = year_and_week, y = fulfill_rate, group = 1))+
scale_x_discrete(breaks = c("2019|10","2019|25","2019|40","2020|02","2020|10","2020|20","2020|30","2020|40","2020|48"))+
scale_y_continuous(labels = scales::percent, limits = c(0,1))+
theme_graph()+
theme(axis.text.x = element_text(angle = 45))+
labs(title = "Fulfill Rate per FC",
subtitle = "% units shipped from Ideal FC",
y = "",
x = "Year / Week (Ship Date)")+
facet_wrap(~effective_cluster)
q1 %>%
group_by(year_and_week) %>%
summarise(units_ideal_fc_choose = sum(units_ideal_fc_choose),
total_units = sum(total_units)) %>%
mutate(fulfill_rate = units_ideal_fc_choose/total_units) %>%
ggplot2::ggplot()+
geom_col(mapping = aes(x = year_and_week, y = fulfill_rate), fill = "dark orange")+
scale_x_discrete(breaks = c("2019|10","2019|25","2019|40","2020|02","2020|10","2020|20","2020|30","2020|40","2020|48"))+
scale_y_continuous(labels = scales::percent, limits = c(0,1))+
theme_graph()+
labs(title = "Fulfill Rate",
subtitle = "% units shipped from Ideal FC",
y = "",
x = "Year / Week (Ship Date)")
q1 %>%
group_by(year_and_week) %>%
summarise(units_ideal_fc_choose = sum(units_ideal_fc_choose),
total_units = sum(total_units)) %>%
mutate(fulfill_rate = units_ideal_fc_choose/total_units) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = year_and_week, y = fulfill_rate, group = 1))+
scale_x_discrete(breaks = c("2019|10","2019|25","2019|40","2020|02","2020|10","2020|20","2020|30","2020|40","2020|48"))+
scale_y_continuous(labels = scales::percent, limits = c(0,1))+
theme_graph()+
labs(title = "Fulfill Rate",
subtitle = "% units shipped from Ideal FC",
y = "",
x = "Year / Week (Ship Date)")
q1 %>%
group_by(year_and_week) %>%
summarise(units_ideal_fc_choose = sum(units_ideal_fc_choose),
total_units = sum(total_units)) %>%
mutate(fulfill_rate = units_ideal_fc_choose/total_units) %>%
ggplot2::ggplot()+
geom_line(mapping = aes(x = year_and_week, y = fulfill_rate, group = 1), size = 1)+
scale_x_discrete(breaks = c("2019|10","2019|25","2019|40","2020|02","2020|10","2020|20","2020|30","2020|40","2020|48"))+
scale_y_continuous(labels = scales::percent, limits = c(0,1))+
theme_graph()+
labs(title = "Fulfill Rate",
subtitle = "% units shipped from Ideal FC",
y = "",
x = "Year / Week (Ship Date)")
install.packages("gt")
install.packages("gt")
library(gt)
library(gt)
detach("package:gt", unload = TRUE)
library(gt)
detach("package:gt", unload = TRUE)
install.packages("gt")
install.packages("gt")
library(gt)
install.packages("gt", dependencies = T)
install.packages("gt", dependencies = T)
library(htmltools)
detach("package:htmltools", unload = TRUE)
update.packages("htmltools")
library(gt)
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
detach("package:htmltools", unload = TRUE)
library(gt)
update.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(gt)
library(htmltools)
detach("package:htmltools", unload = TRUE)
library(htmltools)
detach("package:htmltools", unload = TRUE)
remove.packages("htmltools", lib="~/R/win-library/4.0")
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
install.packages("htmltools")
install.packages("htmltools")
library(gt)
-- version
--version
version
library(GGally)
library(fpp3)
library(fable)
library(tsibble)
library(tsibbledata)
library(feasts)
library(tidyverse)
library(readr)
library(stringr)
library(plotly)
library(patchwork)
library(seasonal)
library(fma)
# Establishing graph theme
theme_graph <- function(){
theme(
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(face = "italic", size = 9),
axis.text = element_text(size = 9),
axis.title = element_text(face = "italic", size = 9),
strip.background = element_rect(fill = "grey"),
strip.text = element_text(face = "bold"),
legend.title = element_blank(),
legend.position = "bottom"
)
}
path <- "C:/Users/fppicco/Desktop/R/Projects/forecast_study"
head(tsibbledata::vic_elec)
gafa_stock %>% head()
head(tsibbledata::global_economy)
filter(tsibbledata::glov)
head(filter(tsibbledata::global_economy$Country == "Brasil"))
filter(tsibbledata::global_economy$Country == "Brasil")
filter(tsibbledata::global_economy$Code == "BR") %>% head()
?global_economy
rm(list=ls()) # limpando memoria
library(tseries) #manipular ST
library(forecast) #previsão
library(ggplot2) #graficos
library(lmtest) #teste
args(Arima)
help(Arima) # ou f1 em cima da função
banco_imp <- read.table("https://raw.githubusercontent.com/icaroagostino/ARIMA/master/dados/IMP.txt", header = T)
banco_expo <- read.table("https://raw.githubusercontent.com/icaroagostino/ARIMA/master/dados/EXPO.txt", header = T)
attach(banco_imp)
attach(banco_expo)
imp <- ts(IMP, start = 2012, frequency = 12)
exp <- ts(EXPO, start = 2012, frequency = 12)
imp
exp
autoplot(imp)
ggtsdisplay(imp)
ggtsdisplay(imp, main="Importações totais")
ggtsdisplay(imp, plot.type = "histogram")
ggtsdisplay(imp, plot.type = "scatter")
decompose(imp)
autoplot(decompose(imp))
imp %>% decompose %>% autoplot
kpss.test(imp)
kpss.test(diff(imp)) # d = 1
adf.test(imp)
adf.test(diff(imp)) # d = 1
autoplot(diff(imp)) + autolayer(imp)
ggtsdisplay(diff(imp))
imp_in <- window(imp, start = 2012, end = c(2016,12))
imp_out <- window(imp, start = 2017, end = c(2017,12))
autoplot(imp_in) + autolayer(imp_out)
fit1 <- auto.arima(imp_in) # ajuste automatico
fit1 # modelo ajustado
coeftest(fit1) # sig. parametros
fit2 <- Arima(imp_in, order = c(1,1,1), seasonal = c(1,0,0)) # ajuste manual
fit2
coeftest(fit2)
autoplot(fit1) # raízes
checkresiduals(fit1) #resíduos
ggAcf(resid(fit1))
ggPacf(resid(fit1))
autoplot(imp_in) + autolayer(fitted(fit1)) # real x ajustado
library(TSA)
autoplot(rstandard(fit1)) +
geom_hline(yintercept = 2, lty=3) +
geom_hline(yintercept = -2, lty=3) +
geom_hline(yintercept = 3, lty=2, col="4") +
geom_hline(yintercept = -3, lty=2, col="4")
forecast(fit1, h = 12) # previsão h = 12
forecast(fit1, h = 12) %>% autoplot
autoplot(forecast(fit1, h = 12))
forecast(fit1, h = 12) %>% autoplot
autoplot(forecast(fit1, h = 12))
f1 <- forecast(fit1, h = 12) # salvar previsão
autoplot(f1) + autolayer(imp_out) # comparar com real
accuracy(f1) # medidas de erro
accuracy(f1, imp_out)
citation() # citação do R
citation('forecast') # citação dos pacotes
citation('tseries')
setwd("C:\Users\fppicco\Desktop\R\Github\franciscopiccolo.github.io")
setwd("\Users\fppicco\Desktop\R\Github\franciscopiccolo.github.io")
setwd("C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
setwd("C:/Users/fppicco/Desktop/R/Github")
setwd("C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io")
blogdown::serve_site()
blogdown::stop_server()
setwd("C:/Users/fppicco/Desktop/R/Github")
blogdown::serve_site()
setwd("C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io")
blogdown::serve_site()
setwd("C:/Users/fppicco/Desktop/R/Github/")
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
setwd("C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io")
blogdown::serve_site()
library(tidyverse)
mtcars %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = cyl, y = mph))
mtcars %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = cyl, y = mpg))
blogdown::hugo_version()
blogdown::serve_site()
blogdown::stop_server()
dataset_1 <- readxl::read_excel(path = "C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io/datasets/2020-12-06-trabalho-econometria-gabriela/dataset_1.xlsx")
dataset_1 %>%
head()
dataset_1 %>%
head()
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning))
dataset_1 <- readxl::read_excel(path = "C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io/datasets/2020-12-06-trabalho-econometria-gabriela/dataset_1.xlsx")
dataset_1 %>%
str()
dataset_1 <- readxl::read_excel(path = "C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io/datasets/2020-12-06-trabalho-econometria-gabriela/dataset_1.xlsx")
dataset_1 %>%
str()
dataset_1 %>%
head()
dataset_1 %>%
dim()
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning))
dataset_1 <- readxl::read_excel(path = "C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io/datasets/2020-12-06-trabalho-econometria-gabriela/dataset_1.xlsx")
dataset_1 %>%
head()
dataset_1 %>%
dim()
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning))
dataset_1 <- readxl::read_excel(path = "C:/Users/fppicco/Desktop/R/Github/franciscopiccolo.github.io/datasets/2020-12-06-trabalho-econometria-gabriela/dataset_1.xlsx")
dataset_1 %>%
head()
dataset_1 %>%
dim()
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning))
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning))+
scale_y_log10()
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning))+
scale_y_log10(labes = scales::comma)
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning))+
scale_y_log10(labels = scales::comma)
dataset_1 %>%
head()
dataset_1 %>%
group_by(Ano, Trimestre) %>%
summarise(count = n()) %>%
head()
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning))+
scale_y_log10(labels = scales::comma)+
labs(title = "Distribuição")
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning, color = race))+
scale_y_log10(labels = scales::comma)+
labs(title = "Distribuição")
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning, color = race))+
scale_y_log10(labels = scales::comma)+
theme(legend.position = "none",
legend.title = element_blank())+
labs(title = "Distribuição")
dataset_1 %>%
head()
dataset_1 %>%
group_by(race) %>%
summarise(count = n()) %>%
head()
dataset_1 <-
dataset_1 %>%
filter(race %in% c("branco","parda","preto"))
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning, color = race))+
scale_y_log10(labels = scales::comma)+
theme(legend.position = "none",
legend.title = element_blank())+
labs(title = "Distribuição")
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning, color = race), outlier.shape = 20, outlier.color = "black")+
scale_y_log10(labels = scales::comma)+
theme(legend.position = "none",
legend.title = element_blank())+
labs(title = "Distribuição")
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning, color = race), outlier.shape = 20, outlier.color = "black")+
scale_y_log10(labels = scales::comma)+
theme(legend.position = "none",
legend.title = element_blank())+
labs(title = "Distribuição",
y = "Rendimento Mensal",
x = "Grupos")
dataset_1 %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(x = race, y = monthly_earning, color = race), outlier.shape = 20, outlier.color = "black")+
scale_y_log10(labels = scales::comma)+
theme(legend.position = "none",
legend.title = element_blank())+
labs(title = "Distribuição da Renda Mensal em cada Grupo",
y = "Rendimento Mensal",
x = "Grupos")
dataset_1 %>%
head()
dataset_1 %>%
group_by(race) %>%
summarise(mean = mean(monthly_earning),
sd = sd(monthly_earning)) %>%
head()
dataset_1 %>%
group_by(race) %>%
summary()
dataset_1 %>%
select(race, monthly_earning) %>%
summary()
dataset_1 %>%
group_by(race) %>%
summarise(min = min(monthly_earning),
max = max(monthly_earning),
mean = mean(monthly_earning),
sd = sd(monthly_earning)) %>%
head()
dataset_1 %>%
filter(monthly_earning == 0) %>%
group_by(race) %>%
summarise(count = n())
dataset_1 %>%
filter(monthly_earning == 0) %>%
group_by(race, job_type) %>%
summarise(count = n())
dataset_1 %>%
filter(monthly_earning == 0) %>%
group_by(job_type) %>%
summarise(count = n())
dataset_1 %>%
filter(monthly_earning == 0) %>%
group_by(job_type) %>%
summarise(count = n()) %>%
arrange(desc(count))
dataset_1 %>%
filter(monthly_earning == 0) %>%
group_by(job_type) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
mutate(total = n())
dataset_1 %>%
filter(monthly_earning == 0) %>%
group_by(job_type) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
summarise(total = n())
dataset_1 %>%
filter(monthly_earning == 0) %>%
group_by(job_type) %>%
summarise(count = n()) %>%
arrange(desc(count))
dataset_1 %>%
filter(monthly_earning == 0) %>%
group_by(job_type) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
summarise(total = sum(count))
dataset_1 %>%
filter(monthly_earning == 0) %>%
group_by(job_type) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
mutate(total = sum(count))
dataset_1 %>%
mutate(is_zero_earning = case_when(monthly_earning == 0 ~ 1)) %>%
View()
dataset_1 %>%
mutate(is_zero_earning = case_when(monthly_earning == 0 ~ 1 TRUE ~ 0)) %>%
View()
dataset_1 %>%
mutate(is_zero_earning = case_when(monthly_earning == 0 ~ 1, TRUE ~ 0)) %>%
View()
dataset_1 %>%
mutate(is_zero_earning = case_when(monthly_earning == 0 ~ 1, TRUE ~ 0)) %>%
group_by(race, is_zero_earning) %>%
summarise(total = n(),
is_zero = sum(is_zero_earning)) %>%
head()
dataset_1 %>%
mutate(is_zero_earning = case_when(monthly_earning == 0 ~ 1, TRUE ~ 0)) %>%
group_by(race) %>%
summarise(total = n(),
is_zero = sum(is_zero_earning)) %>%
head()
dataset_1 %>%
mutate(is_zero_earning = case_when(monthly_earning == 0 ~ 1, TRUE ~ 0)) %>%
group_by(job_type) %>%
summarise(total = n(),
is_zero = sum(is_zero_earning)) %>%
mutate(share_zero = round(is_zero/total)) %>%
arrange(desc(share_zero)) %>%
head()
dataset_1 %>%
mutate(is_zero_earning = case_when(monthly_earning == 0 ~ 1, TRUE ~ 0)) %>%
group_by(job_type) %>%
summarise(total = n(),
is_zero = sum(is_zero_earning)) %>%
mutate(share_zero = round(is_zero/total, digits = 4)) %>%
arrange(desc(share_zero)) %>%
head()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
