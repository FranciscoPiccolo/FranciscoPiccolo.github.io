y = "GTV generated")
query_12 %>%
mutate(share_blocked = round(items_qty/stock_quantity, digits = 4)) %>%
ggplot()+
geom_histogram(mapping = aes(x = share_blocked), fill = graph_color, binwidth = .05)+
scale_x_log10(labels = scales::percent)+
scale_y_continuous(labels = scales::comma)+
theme_graph()+
labs(title = "Slipers impact on SKU's inventory",
subtitle = "Same day impact",
x = "% stock blocked",
y = "SKUs")
query_13 %>%
filter(sale_date >= Sys.Date()-365) %>%
mutate(sliper_type = fct_relevel(sliper_type, levels = c("light","medium","heavy","critical"))) %>%
distinct(customer_name, sliper_type) %>%
mutate(qty = 1) %>%
group_by(sliper_type) %>%
summarise(qty = sum(qty)) %>%
mutate("%_qty" = 100*(round(qty/sum(qty), digits = 4))) %>%
inner_join(gtv, by = c("sliper_type" = "sliper_type")) %>%
mutate(sliper_type = ifelse(sliper_type == "critical","critial (above 1.000.000)",
ifelse(sliper_type == "heavy","heavy (between 100.001 and 1.000.000)",
ifelse(sliper_type == "medium","medium (between 10.001 and 100.000",
ifelse(sliper_type == "light", "light (up to 10.000 of revenue generation",""))))) %>%
head()
install.packages("kableExtra")
kableExtra::kable(df)
df <- query_13 %>%
filter(sale_date >= Sys.Date()-365) %>%
mutate(sliper_type = fct_relevel(sliper_type, levels = c("light","medium","heavy","critical"))) %>%
distinct(customer_name, sliper_type) %>%
mutate(qty = 1) %>%
group_by(sliper_type) %>%
summarise(qty = sum(qty)) %>%
mutate("%_qty" = 100*(round(qty/sum(qty), digits = 4))) %>%
inner_join(gtv, by = c("sliper_type" = "sliper_type")) %>%
mutate(sliper_type = ifelse(sliper_type == "critical","critial (above 1.000.000)",
ifelse(sliper_type == "heavy","heavy (between 100.001 and 1.000.000)",
ifelse(sliper_type == "medium","medium (between 10.001 and 100.000",
ifelse(sliper_type == "light", "light (up to 10.000 of revenue generation","")))))
kableExtra::kable(df)
df <- query_13 %>%
filter(sale_date >= Sys.Date()-365) %>%
mutate(sliper_type = fct_relevel(sliper_type, levels = c("light","medium","heavy","critical"))) %>%
distinct(customer_name, sliper_type) %>%
mutate(qty = 1) %>%
group_by(sliper_type) %>%
summarise(qty = sum(qty)) %>%
mutate("%_qty" = 100*(round(qty/sum(qty), digits = 4))) %>%
inner_join(gtv, by = c("sliper_type" = "sliper_type")) %>%
mutate(sliper_type = ifelse(sliper_type == "critical","critial (above 1.000.000)",
ifelse(sliper_type == "heavy","heavy (between 100.001 and 1.000.000)",
ifelse(sliper_type == "medium","medium (between 10.001 and 100.000",
ifelse(sliper_type == "light", "light (up to 10.000 of revenue generation","")))))
kableExtra::kable(df)
knitr::kable(df)
knitr::kable(df)
df <- query_13 %>%
filter(sale_date >= Sys.Date()-365) %>%
mutate(sliper_type = fct_relevel(sliper_type, levels = c("light","medium","heavy","critical"))) %>%
distinct(customer_name, sliper_type) %>%
mutate(qty = 1) %>%
group_by(sliper_type) %>%
summarise(qty = sum(qty)) %>%
mutate("%_qty" = 100*(round(qty/sum(qty), digits = 4))) %>%
inner_join(gtv, by = c("sliper_type" = "sliper_type")) %>%
mutate(sliper_type = ifelse(sliper_type == "critical","critial (above 1.000.000)",
ifelse(sliper_type == "heavy","heavy (between 100.001 and 1.000.000)",
ifelse(sliper_type == "medium","medium (between 10.001 and 100.000",
ifelse(sliper_type == "light", "light (up to 10.000 of revenue generation","")))))
df
kable(df, "latex")
kable(df, "latex")
query_13$sale_date <- lubridate::ymd(query_13$sale_date)
query_13 %>%
filter(sale_date >= Sys.Date()-365) %>%
group_by(sliper_type) %>%
summarise(gtv = sum(gtv)) %>%
mutate("%_gtv" = 100*(round(gtv/sum(gtv), digits = 4))) %>%
select(sliper_type, "%_gtv") -> gtv
library(rJava)
library(RJDBC)
library(extrafont)
library(tidyverse)
library(gridExtra)
library(zoo)
library(knitr)
library(scales)
library(ggthemes)
library(kableExtra)
theme_graph <- function(){
theme(
plot.title = element_text(size = 10),
plot.subtitle = element_text(size = 6.5),
plot.caption = element_text(face = "italic", size = 6),
axis.text = element_text(size = 6),
axis.title = element_text(face = "italic", size = 6),
strip.background = element_rect(fill = "grey"),
strip.text = element_text(face = "bold"),
legend.title = element_blank(),
legend.position = "bottom",
legend.text = element_text(size = 5.5)
)
}
graph_color <- "#00AFA4"
graph_color_2 <- "#222222"
graph_color_3 <- "dark orange"
line_size <- .8
black_friday <- c("2019-11-29","2018-11-23","2017-11-24")
df <- query_13 %>%
filter(sale_date >= Sys.Date()-365) %>%
mutate(sliper_type = fct_relevel(sliper_type, levels = c("light","medium","heavy","critical"))) %>%
distinct(customer_name, sliper_type) %>%
mutate(qty = 1) %>%
group_by(sliper_type) %>%
summarise(qty = sum(qty)) %>%
mutate("%_qty" = 100*(round(qty/sum(qty), digits = 4))) %>%
inner_join(gtv, by = c("sliper_type" = "sliper_type")) %>%
mutate(sliper_type = ifelse(sliper_type == "critical","critial (above 1.000.000)",
ifelse(sliper_type == "heavy","heavy (between 100.001 and 1.000.000)",
ifelse(sliper_type == "medium","medium (between 10.001 and 100.000",
ifelse(sliper_type == "light", "light (up to 10.000 of revenue generation","")))))
kable(df, "latex")
kable(df)
tinytex::reinstall_tinytex()
sql_syntax <- readr::read_file("C:/Users/francisco.piccolo/Desktop/R/01.Analytics_Projects/nps_analysis_success_page_answer_rate/queries.sql")
library(rJava)
library(RJDBC)
library(tidyverse)
library(knitr)
library(scales)
theme_graph <- function(){
theme(
plot.title = element_text(size = 10),
plot.subtitle = element_text(size = 6.5),
plot.caption = element_text(face = "italic", size = 6),
axis.text = element_text(size = 6),
axis.title = element_text(face = "italic", size = 6),
strip.background = element_rect(fill = "grey"),
strip.text = element_text(face = "bold", size = 4.5),
legend.title = element_blank(),
legend.position = "bottom",
legend.text = element_text(size = 5.5)
)
}
graph_color <- "#00AFA4"
graph_color_2 <- "#222222"
graph_color_3 <- "dark orange"
line_size <- .8
black_friday <- c("2019-11-29","2018-11-23","2017-11-24")
dw_inf <- data.frame(read.table("C:/Users/francisco.piccolo/Desktop/R/Redshift_access/dw_prod_access.txt",sep = " "))
sprintf <- as.character(dw_inf[2,2])
host <- as.character(dw_inf[3,2])
port <- as.character(dw_inf[4,2])
dw <- as.character(dw_inf[5,2])
user <- as.character(dw_inf[6,2])
password <- as.character(dw_inf[7,2])
driver <- JDBC(driverClass = 'com.amazon.redshift.jdbc41.Driver', classPath = Sys.glob("C:/Users/francisco.piccolo/Documents/R/Redshift_JDBC/RedshiftJDBC41-1.1.9.1009.jar"), identifier.quote="`")
db_end <- sprintf(sprintf, host, port, dw)
jconn <- dbConnect(driver, db_end, user, password)
sql_syntax <- readr::read_file("C:/Users/francisco.piccolo/Desktop/R/01.Analytics_Projects/nps_analysis_success_page_answers_rate/queries.sql")
query_1 <- RJDBC::dbGetQuery(jconn,substr(sql_syntax,min(stringr::str_locate(string=sql_syntax,'-- query_1_begin')),max(stringr::str_locate(string=sql_syntax,'-- query_1_end'))))
readr::write_rds(query_1,"C:/Users/francisco.piccolo/Desktop/R/01.Analytics_Projects/nps_analysis_success_page_answers_rate/datasets/query_1.RDS")
query_1$sale_date <- lubridate::ymd(query_1$sale_date)
query_1 %>%
head()
query_1 %>%
ggplot()+
geom_line(mapping = aes(x = sale_date, y = answer_rate, group = country))
query_1 %>%
ggplot()+
geom_line(mapping = aes(x = sale_date, y = answer_rate, group = sotre))
query_1 %>%
ggplot()+
geom_line(mapping = aes(x = sale_date, y = answer_rate, group = store))
query_1 %>%
ggplot()+
geom_line(mapping = aes(x = sale_date, y = answer_rate, group = store, color = store))
query_1 %>%
filter(store %in% c("DAFITI BRAZIL","DAFITI ARGENTINA","DAFITI CHILE","DAFITI COLOMBIA")) %>%
ggplot()+
geom_line(mapping = aes(x = sale_date, y = answer_rate, group = store, color = store))
library(tidyverse)
library(DAAG)
library(Amelia)
library(ggthemes)
library(pander)
library(gridExtra)
library(grid)
library(plot3D)
theme_graph <- function(){
theme(
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(face = "italic", size = 9),
axis.text = element_text(size = 9),
axis.title = element_text(face = "italic", size = 9),
text = element_text(family = "Times New Roman"),
strip.background = element_rect(fill = "grey"),
strip.text = element_text(face = "bold"),
legend.title = element_blank(),
legend.position = "bottom"
)
}
graph_color <- "#006666"
# Caminho para a pasta que contém os data sets para cada exercício
path <- "C:/Users/francisco.piccolo/Desktop/R/franciscopiccolo.github.io/base_de_dados/livro-econometria-basica-gujarati/"
tbl_2.8 <- read.table(file = paste(path,"tabela_2.8_despesa_india.txt",sep = ""),
sep = " ",
header = T,
dec = ",")
# Random sample
tbl_2.8[sample(nrow(tbl_2.8),10), ]
tbl_2.8 %>%
ggplot(aes(x = total, y = alimento))+
geom_point(color = graph_color, shape = 20)+
geom_smooth(method = "lm", se = F)+
theme_graph()+
labs(title = "Food expenditures and total expenditures",
x = "Total expenditures",
y = "Food expenditures")
tbl_2.8 %>%
ggplot(aes(x = total, y = alimento))+
geom_point(color = graph_color, shape = 20)+
geom_smooth(method = "lm", se = F, color = "dark orange")+
theme_graph()+
labs(title = "Food expenditures and total expenditures",
x = "Total expenditures",
y = "Food expenditures")
tbl_2.8 %>%
ggplot(aes(x = total, y = alimento))+
geom_point(color = graph_color, shape = 20)+
geom_smooth(method = "lm", se = F, color = "dark orange", lty = 2)+
theme_graph()+
labs(title = "Food expenditures and total expenditures",
x = "Total expenditures",
y = "Food expenditures")
df_3.18 <- data.frame(
prova_parcial = c(1,3,7,10,9,5,4,8,2,6),
prova_final = c(3,2,8,7,9,6,5,10,1,4)
)
# Sample data
df_3.18[sample(nrow(df_3.18),10), ]
# Spearman correlation
cor.test(df_3.18$prova_parcial,df_3.18$prova_final,method = "spearman") %>% pander()
library(tidyverse)
library(DAAG)
library(Amelia)
library(ggthemes)
library(pander)
library(gridExtra)
library(grid)
library(plot3D)
theme_graph <- function(){
theme(
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(face = "italic", size = 9),
axis.text = element_text(size = 9),
axis.title = element_text(face = "italic", size = 9),
text = element_text(family = "Times New Roman"),
strip.background = element_rect(fill = "grey"),
strip.text = element_text(face = "bold"),
legend.title = element_blank(),
legend.position = "bottom"
)
}
graph_color <- "#006666"
# Caminho para a pasta que contém os data sets para cada exercício
path <- "C:/Users/francisco.piccolo/Desktop/R/franciscopiccolo.github.io/base_de_dados/livro-econometria-basica-gujarati/"
# Spearman correlation
cor.test(df_3.18$prova_parcial,df_3.18$prova_final,method = "spearman") %>% pander()
df_3.18 <- data.frame(
prova_parcial = c(1,3,7,10,9,5,4,8,2,6),
prova_final = c(3,2,8,7,9,6,5,10,1,4)
)
# Sample data
df_3.18[sample(nrow(df_3.18),10), ]
# Spearman correlation
cor.test(df_3.18$prova_parcial,
df_3.18$prova_final,
method = "spearman") %>%
pander::pander()
setwd(dir = "C:/Users/francisco.piccolo/Desktop/R/franciscopiccolo.github.io")
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::hugo_version()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
library(tidyverse)
library(lmtest)
library(corrplot)
library(readxl)
library(gridExtra)
library(ggthemes)
theme_graph <- function(){
theme(
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(face = "italic", size = 9),
axis.text = element_text(size = 9),
axis.title = element_text(face = "italic", size = 9),
text = element_text(family = "Times New Roman"),
strip.background = element_rect(fill = "grey"),
strip.text = element_text(face = "bold"),
legend.title = element_blank(),
legend.position = "bottom"
)
}
graph_color <- "#006666"
dados <- readxl::read_excel("C:/Users/francisco.piccolo/Desktop/R/franciscopiccolo.github.io/datasets/Econometria_exercicios/autocorrelacao_cana_de_acucar.xlsx")
# Chaging the name of the field to remove blanck spaces
dados %>%
transmute(
periodo = Período,
area = Área,
valor = `Preço da Cana de Açúcar`*100,
log_area = log(area),
log_valor = log(valor),
delta_area = round((area/lag(area,1))-1,digits = 2),
delta_log_area = round(log_area-lag(log_area,1),digits = 2),
delta_valor = round((valor/lag(valor,1))-1,digits=2),
delta_log_valor = round(log_valor-lag(log_valor),digits = 2),
log_area_precicion = delta_area - delta_log_area,
log_valor_precision = delta_valor - delta_log_valor
) -> dados_2
dados_2[sample(nrow(dados_2),10), ] %>%
as.tibble()
data.frame(
"Valor" = c(100,105,112,120),
"Crescimento" = c("-","5.00%","6.67%","7.14%"),
"Log natural" = c(log(100),log(105),log(112),log(120)),
"Delta" = c("-",
paste(round(log(105)-log(100),4)*100,"%",sep = ""),
paste(round(log(112)-log(105),4)*100,"%",sep = ""),
paste(round(log(120)-log(112),4)*100,"%",sep = ""))) %>%
as.tibble()
data.frame(
"Valor" = c(100,105,112,120),
"Crescimento" = c("-","5.00%","6.67%","7.14%"),
"Log natural" = c(log(100,2),log(105,2),log(112,2),log(120,2)),
"Delta" = c("-",
paste(round(log(105,2)-log(100,2),4)*100,"%",sep = ""),
paste(round(log(112,2)-log(105,2),4)*100,"%",sep = ""),
paste(round(log(120,2)-log(112,2),4)*100,"%",sep = ""))) %>%
as.tibble()
data.frame(
"Valor" = c(100,105,112,120),
"Crescimento" = c("-","5.00%","6.67%","7.14%"),
"Log natural" = c(log(100,10),log(105,10),log(112,10),log(120,10)),
"Delta" = c("-",
paste(round(log(105,10)-log(100,10),4)*100,"%",sep = ""),
paste(round(log(112,10)-log(105,10),4)*100,"%",sep = ""),
paste(round(log(120,10)-log(112,10),4)*100,"%",sep = ""))) %>%
as.tibble()
dados_2
dados_2 %>%
ggplot(aes(x=log_area,y=log_valor))+
geom_point()+
geom_smooth(method = "lm",se = T)+
theme_graph()+
labs(title = "Area planted and suggarcane price relation",
subtitle= "There's an elasticity ",
x = "Planted area (ln)",
y = "Market price (ln)")
dados_2 %>%
ggplot(aes(x=log_area,y=log_valor))+
geom_point()+
geom_smooth(method = "lm",se = T, lty = 2, color = "dark orange")+
theme_graph()+
labs(title = "Area planted and suggarcane price relation",
subtitle= "There's an elasticity ",
x = "Planted area (ln)",
y = "Market price (ln)")
dados_2 %>%
ggplot(aes(x=log_area,y=log_valor))+
geom_point()+
geom_smooth(method = "lm",se = F, lty = 2, color = "dark orange")+
theme_graph()+
labs(title = "Area planted and suggarcane price relation",
subtitle= "There's an elasticity ",
x = "Planted area (ln)",
y = "Market price (ln)")
summary(model) %>%
as.tibble()
summary(lm(log_area~log_valor,data = dados_2))
residual <- residuals(model)
model <- lm(log_area~log_valor,data = dados_2)
summary(model)
residual <- residuals(model)
df <- cbind(dados_2, residual)
df %>%
ggplot(aes(x=residual))+
geom_histogram(binwidth = .05,alpha=.4,fill="dark orange")+
theme_graph()+
labs(title = "Histograma dos resíduos",
subtitle = "Aparente normalidade dos dados",
x = "",
y = "")
df %>%
ggplot(aes(sample=residual))+
geom_qq()+
theme_graph()+
labs(title = "QQ-Plot dos resíduos",
subtitle = "Corrobora a suposta normalidade dos dados",
x = "",
y = "")
lmtest::dwtest(model) %>%
as.tibble()
lmtest::dwtest(model)
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
library(tidyverse)
library(DAAG)
library(Amelia)
library(ggthemes)
library(pander)
library(gridExtra)
library(grid)
library(plot3D)
theme_graph <- function(){
theme(
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(face = "italic", size = 9),
axis.text = element_text(size = 9),
axis.title = element_text(face = "italic", size = 9),
text = element_text(family = "Times New Roman"),
strip.background = element_rect(fill = "grey"),
strip.text = element_text(face = "bold"),
legend.title = element_blank(),
legend.position = "bottom"
)
}
graph_color <- "#006666"
# Caminho para a pasta que contém os data sets para cada exercício
path <- "C:/Users/francisco.piccolo/Desktop/R/franciscopiccolo.github.io/datasets/livro-econometria-basica-gujarati/"
df <-
data.frame(y = c(86,79,76,69,65,62,52,51,51,48),
x = c(3,7,12,17,25,35,45,55,70,120))
df %>%
ggplot()+
geom_point(mapping = aes(x = x, y = y))+
theme_graph()
df %>%
ggplot()+
geom_point(mapping = aes(x = x, y = y))+
theme_graph()+
labs(title = "Reciprocal regression model")
# Gerando o modelo de regressão recíproco
df %>%
lm(formula = "100/(100-y) ~ I(1/x)") %>%
summary()
blogdown::html_page()
blogdown::html_page(...)
rmarkdown::html_document()
rmarkdown::html_document("2020-03-03-basic-econometrics-by-gujarati-and-porter.Rmd")
rmarkdown::render("2020-03-03-basic-econometrics-by-gujarati-and-porter.Rmd")
rmarkdown::render("2020-03-03-basic-econometrics-by-gujarati-and-porter.Rmd", html_document())
rmarkdown::render("2020-03-03-basic-econometrics-by-gujarati-and-porter.Rmd", html_document())
blogdown::html_page()
blogdown::serve_site()
blogdown::stop_server()
df_3.18 <- data.frame(
partial_test = c(1,3,7,10,9,5,4,8,2,6),
final_test = c(3,2,8,7,9,6,5,10,1,4)
)
# Sample data
df_3.18[sample(nrow(df_3.18),10), ] %>%
as.tibble()
# Spearman correlation
cor.test(df_3.18$partial_test,
df_3.18$final_test,
method = "spearman")
tbl_3.6 <- read.table(file = paste(path,"tabela_3.6_produtividade_e_salario.txt",sep = ""),
sep = " ",
header = T,
dec = ",")
tbl_3.6[sample(nrow(tbl_3.6),10), ] %>%
as.tibble()
tbl_3.7 <- read.table(file =
paste(path,"tabela_3.7_ouro_nyse_IPC.txt",sep = ""),
sep = " ",
header = T,
dec = ",")
# Sample from dataset
tbl_3.7[sample(nrow(tbl_3.7),10), ] %>%
as.tibble()
# Modelo 1, gold_price ~ ipc_index
tbl_3.7_df_adj %>%
lm(formula = gold_price_var ~ ipc_index_var)
tbl_5.5 %>%
lm(formula = wage~expense) %>%
summary()
# Critical t value
qt(0.975, df = 49)
# cpi ~ gold_price
tbl_3.7 %>%
lm(formula = ipc_index~gold_price) %>%
summary()
blogdown::serve_site()
