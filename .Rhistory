body_mass_index = bmi
) %>%
select(sport,
sex,
red_cell_count,
white_cell_count,
hematrocit_percent,
hemaglobin_concentration,
plasma_ferritins,
body_mass_index) %>%
filter(sex == "f") %>%
tidyr::gather(key = "campo",value = "valor", 3:8) %>%
mutate(sport = fct_reorder(sport, valor, .desc = F)) %>%
ggplot(aes(y = valor, fill = sport))+
geom_boxplot(alpha = .6)+
theme_graph()+
labs(
title = "Metrics variations accross sport and genre",
subtitle = "Genre = Female",
x = "",
y = ""
)+
facet_wrap(~campo,scales = "free")
y <- rnorm(100)
tibble(mean = mean(y),
sd = sd(y))
# Criando um vetor com 25 entradas vazias
saida <- rep(NA,25)
# Criando um loop para gerar no vetor vazio as 25 amostragens
for(i in 1:25){
saida[i] <- data.frame(
mean(rnorm(100))
)
}
# Criando um data.frame com o resultado acima
df <- data.frame(
a = matrix(unlist(saida),nrow = 25,byrow = F),stringsAsFactors = F)
tibble(mean = mean(df[,1]),
sd = sd(df[,1]))
# Criando a função, x = repetições, y = amostras aleatórias
fun <- function(x,y){
saida <- rep(NA,x)
for(i in 1:x){
saida[i] <- data.frame(
round(mean(rnorm(y)),digits = 2)
)
}
df <- data.frame(
a = matrix(unlist(saida),nrow = x,byrow = T),stringsAsFactors = F)
}
# Rodando a função, 25 repetições com 100 amostras cada
fun(25,100) %>%
ggplot(aes(x = a))+
geom_density(fill = graph_color, alpha = .4)+
theme_graph()
pexp(q = 21,rate = 0.05) # usando a fórmula pronta do R
DAAG::nsw74demo %>%
mutate(group = ifelse(trt == 0,"control","teste")) %>%
select(group,
re74) %>%
ggplot(aes(x = re74, fill = group))+
geom_histogram(alpha = .4)+
scale_x_log10(label = scales::comma)+
theme_graph()+
labs(title = "Income distribution between groups (1974)",
x = "Income, log10 scale",
y = "")
DAAG::nsw74demo %>%
select(trt,
re74) %>%
filter(re74 != 0) %>%
group_by(trt) %>%
summarise(mean = round(mean(re74),digits = 2),
sd = round(sd(re74),digits = 2))
DAAG::nsw74demo %>%
select(trt,
re74) %>%
filter(re74 != 0) %>%
group_by(trt) %>%
summarise(mean = round(mean(re74),digits = 4),
sd = round(sd(re74),digits = 4),
n = n(),
sqrt_n = n()^0.5,
sem = round(sd/sqrt_n,digits = 4),
t_value = qt(0.975,n()-1),
lower_limit = mean - (sem*t_value),
upper_limit = mean + (sem*t_value))
DAAG::nsw74demo %>%
select(trt,
re75) %>%
filter(re75 != 0) %>%
group_by(trt) %>%
summarise(mean = round(mean(re75),digits = 2),
sd = round(sd(re75),digits = 2),
n = n(),
sqrt_n = n()^0.5,
sem = round(sd/sqrt_n,digits = 2),
t_value = qt(0.975,n()-1),
lower_limit = mean - (sem*t_value),
upper_limit = mean + (sem*t_value))
DAAG::nsw74demo %>%
select(trt,
re74) %>%
filter(re74 != 0) %>%
group_by(trt) %>%
summarise(mean = abs(round(mean(re74),digits = 4)),
sd = round(sd(re74),digits = 4),
n = n(),
sqrt_n = n()^0.5,
sem = round(sd/sqrt_n,digits = 4),
t_value = qt(0.975,n()-1),
lower_limit = mean - (sem*t_value),
upper_limit = mean + (sem*t_value))
DAAG::nsw74demo %>%
select(trt,
re75) %>%
filter(re75 != 0) %>%
group_by(trt) %>%
summarise(mean = round(mean(re75),digits = 2),
sd = round(sd(re75),digits = 2),
n = n(),
sqrt_n = n()^0.5,
sem = round(sd/sqrt_n,digits = 2),
t_value = qt(0.975,n()-1),
lower_limit = mean - (sem*t_value),
upper_limit = mean + (sem*t_value))
DAAG::nsw74demo %>%
select(trt,
re75) %>%
filter(re75 != 0) %>%
group_by(trt) %>%
summarise(mean = abs(round(mean(re75),digits = 2)),
sd = round(sd(re75),digits = 2),
n = n(),
sqrt_n = n()^0.5,
sem = round(sd/sqrt_n,digits = 2),
t_value = qt(0.975,n()-1),
lower_limit = mean - (sem*t_value),
upper_limit = mean + (sem*t_value))
DAAG::nsw74demo %>%
select(trt,
re78) %>%
filter(re78 != 0) %>%
group_by(trt) %>%
summarise(mean = round(mean(re78),digits = 2),
sd = round(sd(re78),digits = 2),
n = n(),
sqrt_n = n()^0.5,
sem = round(sd/sqrt_n,digits = 2),
t_value = qt(0.975,n()-1),
lower_limit = mean - (sem*t_value),
upper_limit = mean + (sem*t_value))
t_value <- data.frame(
df = seq(1,100,by = 1)
)
graph_1 <- t_value %>%
mutate(
t_value = qt(0.975,df = row_number())
) %>%
ggplot(aes(x = df,y = t_value,group = 1))+
geom_line(color = graph_color)+
scale_x_log10()+
scale_y_log10()+
theme_graph()+
labs(title = "Log transformation applied",
x = "log_10 of Degrees of freedom",
y = "log_10 of t-statistics")
graph_2 <- t_value %>%
mutate(
t_value = qt(0.975,df = row_number())
) %>%
ggplot(aes(x = df,y = t_value,group = 1))+
geom_line(color = graph_color)+
theme_graph()+
labs(title = "Log transformation not applied",
x = "Degrees of freedom",
y = "t-statistics")
gridExtra::grid.arrange(graph_1,graph_2, ncol = 2)
# Vetor com 10 valores.
a <- rnorm(n = 10, mean = 0, sd = 2)
# Gerando um teste t
pander::pander(t.test(a, mu = 0, conf.level = 0.975))
mean <- round(abs(mean(a)),digits = 4)
sd <- round(sd(a),digits = 4)
n_sqrt <- round(length(a)^0.5,digits = 4)
sem <- round(sd(a)/length(a)^0.5,digits = 4)
t_value <- round(abs(mean(a))/(sem),digits = 4)
p_value <- (1-pt(t_value,10-1))*2 # Multiplica por dois pq é um teste bicaudal (H0 = 0)
data.frame(mean = mean,
sd = sd,
n_sqrt = n_sqrt,
sem = sem,
t_value = t_value,
p_value = p_value)
# Vetor com 10 valores.
a <- rnorm(n = 10, mean = 0, sd = 1.5)
# Gerando um teste t
pander::pander(t.test(a, mu = 0, conf.level = 0.975))
saida <- rep(NA,1000)
for (i in 1:1000){
a <- rnorm(n = 10, mean = 0, sd = 1)
mean <- mean(a)
sd <- sd(a)
sem <- sd/sqrt(10)
saida[i] <- data.frame(
p_value = (1-pt((abs(mean)/sem),9))*2 # Multiplica por dois pq é um teste bicaudal (H0 = 0)
)
}
df <- data.frame(
a = matrix(unlist(saida),nrow = 1000, byrow = F),stringsAsFactors = F)
ggplot(data = df, aes(x = a))+
geom_histogram(fill = graph_color, binwidth = .1)+
expand_limits(x = 1)+
theme_graph()
data_set_1 <- data.frame(stretch = c(46,54,48,50,44,42,52),
distance = c(183,217,189,208,178,150,249))
data_set_2 <- data.frame(stretch = c(25,45,35,40,55,50,30,50,60),
distance = c(71,196,127,187,248,217,114,228,291))
# Plotando os dados
ggplot2::ggplot()+
geom_point(data = data_set_1, aes(x = stretch, y = distance), shape = 2, color = "blue")+
geom_point(data = data_set_2, aes(x = stretch, y = distance), shape = 3, color = "red")+
theme_graph()
# Modelo linear para o data_set_1
model_1 <- lm(formula = stretch ~ distance, data = data_set_1)
# Modelo linear para o data_set_2
model_2 <- lm(formula = stretch ~ distance, data = data_set_2)
# Trazendo os campos de fitted values e resíduos para o data_set_1
data_set_1 %>%
mutate(fitted_values = predict(model_1),
residuals = residuals(model_1))
# Trazendo os campos de fitted values e resíduos para o data_set_2
data_set_2 %>%
mutate(fitted_values = predict(model_2),
residuals = residuals(model_2))
model_1 %>% summary() %>% pander()
model_2 %>% summary() %>% pander()
# Modelo linear robusto para o data_set_1
summary(MASS::rlm(formula = stretch ~ distance, data = data_set_1)) %>% pander()
# Modelo linear robusto para o data_set_2
summary(MASS::rlm(formula = stretch ~ distance, data = data_set_2)) %>% pander()
cars %>%
ggplot()+
geom_point(aes(x = speed, y = dist))+
geom_smooth(aes(x = speed, y = dist, color = "linear"), method = "lm", formula = y ~ x, se = F)+
geom_smooth(aes(x = speed, y = dist, color = "quadratic"), method = "lm", formula = y ~ x + I(x^2), se = F)+
scale_color_manual(values = c("linear" = "blue",
"quadratic" = "red"),
labs(color = ""))+
theme_graph()+
labs(title = "Modelo linear e quadrático para as variáveis",
subtitle = "Linha quadrática com melhor performance",
x = "Speed",
y = "Distância de frenagem")
DAAG::oddbooks %>%
mutate(volume = round(height * thick * breadth, digits = 1),
area = round(height * thick, digits = 1)) %>%
ggplot()+
geom_point(aes(x = log(weight), y = log(volume)))+
geom_smooth(aes(x = log(weight), y = log(volume)), method = "lm", formula = y ~ x, se = F)+
theme_graph()
DAAG::oddbooks %>%
mutate(volume = round(height * thick * breadth, digits = 1),
area = round(height * thick, digits = 1)) %>%
ggplot()+
geom_point(aes(x = log(weight), y = log(area)))+
geom_smooth(aes(x = log(weight), y = log(area)), method = "lm", formula = y ~ x, se = F)+
theme_graph()
library(patchwork)
theme_graph <- function(){
theme(
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(face = "italic", size = 9),
axis.text = element_text(size = 9),
axis.title = element_text(face = "italic", size = 9),
text = element_text(family = "Times New Roman"),
strip.background = element_rect(fill = "grey"),
strip.text = element_text(face = "bold"),
legend.title = element_blank(),
legend.position = "bottom"
)
}
DAAG::ais %>%
group_by(sport,sex) %>%
summarise(qty = n()) %>%
tidyr::spread(sex,qty,fill = 0) %>%
mutate(m_proportion = round(m/(f+m),digits = 2)) %>%
ungroup() %>%
mutate(sport = fct_reorder(sport, m_proportion)) %>%
ggplot(aes(x = sport, y = m_proportion))+
geom_col(fill = graph_color)+
scale_y_continuous(labels = scales::percent)+
theme_graph()+
labs(title = "Sports balance btw men and women participation",
x = "",
y = "Male % participation")+
coord_flip()
DAAG::rainforest %>%
Amelia::missmap(main = "Valores nulos vs não nulos")
df <- data.frame(area = c(694,905,802,1366,716,963,821,714,1018,887,790,696,771,1006,1191),
price = c(192,215,215,274,112.7,185,212,220,276,260,221,255,260,293,375))
df
df <- data.frame(area = c(694,905,802,1366,716,963,821,714,1018,887,790,696,771,1006,1191),
sale.price = c(192,215,215,274,112.7,185,212,220,276,260,221,255,260,293,375))
df %>%
ggplot()+
geom_point(mapping = aes(x = area, y = sale.price))+
theme_graph()
df %>%
ggplot()+
geom_point(mapping = aes(x = area, y = sale.price))+
theme_graph()+
labs(title = "Sales Price vs Area")
df %>%
ggplot()+
geom_point(mapping = aes(x = area, y = sale.price), color = "darkblue")+
theme_graph()+
labs(title = "Sales Price vs Area")
df %>%
ggplot()+
geom_point(mapping = aes(x = area, y = sale.price), color = "darkred")+
theme_graph()+
labs(title = "Sales Price vs Area")
df %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = area, y = sale.price), color = "darkred")+
theme_graph()+
labs(title = "Sales Price vs Area")
df %>%
ggplot2::ggplot()+
geom_histogram(mapping = aes(x = sale.price),
fill = "darkblue",
alpha = .4)+
theme_graph()
df %>%
ggplot2::ggplot()+
geom_histogram(mapping = aes(x = sale.price),
fill = "darkblue",
alpha = .4)+
theme_graph()+
labs(title = "Sales Price Histogram")
df %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = log(area), y = log(sales.price)))
df %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = log(area), y = log(sale.price)))
df %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = log(area), y = log(sale.price)))+
theme_graph()+
labs(title = "Sales Price vs Area using log transformation")
df %>%
ggplot2::ggplot()+
geom_point(mapping = aes(x = log(area), y = log(sale.price)),
color = "darkred")+
theme_graph()+
labs(title = "Sales Price vs Area using log transformation")
df %>%
ggplot2::ggplot()+
geom_histogram(mapping = aes(x = log(sale.price)),
fill = "darkblue",
alpha = .4)+
theme_graph()+
labs(title = "Sale Price Histograma",
subtitle = "Log transformed")
df %>%
ggplot2::ggplot()+
geom_histogram(mapping = aes(x = sale.price),
fill = "darkblue",
alpha = .4)+
theme_graph()+
labs(title = "Sales Price Histogram")
df %>%
ggplot2::ggplot()+
geom_histogram(mapping = aes(x = log(sale.price)),
fill = "darkblue",
alpha = .4)+
theme_graph()+
labs(title = "Sale Price Histograma",
subtitle = "Log transformed")
DAAG::possum %>%
head()
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age),
group = site)+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age),
color = site)+
facet_grid(~sex)
DAAG::possum %>%
head()
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site))+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = agecolor = site))+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, color = site))+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site, color = site))+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site, color = as.factor(site)))+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site, color = as.factor(site)),
outlier.shape = 20,
outlier.color = "black")+
theme_graph()+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site, color = as.factor(site)),
outlier.shape = 20,
outlier.color = "black")+
theme_graph()+
theme(legend.title = element_text(size = 6))+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site, color = as.factor(site)),
outlier.shape = 20,
outlier.color = "black")+
theme_graph()+
theme(legend.title = element_text(size = 7))+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site, color = as.factor(site)),
outlier.shape = 20,
outlier.color = "black")+
theme_graph()+
theme(legend.title = element_text(size = 7))+
scale_color_hue()+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site, fill = as.factor(site)),
outlier.shape = 20,
outlier.color = "black")+
theme_graph()+
theme(legend.title = element_text(size = 7))+
scale_color_hue()+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site, fill = as.factor(site)),
outlier.shape = 20,
outlier.color = "black")+
theme_graph()+
theme(legend.title = element_text(size = 7))+
scale_color_viridis_c()+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site, fill = as.factor(site)),
outlier.shape = 20,
outlier.color = "black")+
theme_graph()+
theme(legend.title = element_text(size = 7))+
scale_fill_viridis_d()+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site, fill = as.factor(site)),
outlier.shape = 20,
outlier.color = "black")+
theme_graph()+
theme(legend.title = element_text(size = 7))+
scale_fill_hue()+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site, fill = as.factor(site)),
outlier.shape = 20,
outlier.color = "black")+
theme_graph()+
theme(legend.title = element_text(size = 7))+
scale_fill_viridis_c()+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site, fill = as.factor(site)),
outlier.shape = 20,
outlier.color = "black")+
theme_graph()+
theme(legend.title = element_text(size = 7))+
scale_fill_viridis_d()+
facet_grid(~sex)
DAAG::possum %>%
ggplot2::ggplot()+
geom_boxplot(mapping = aes(y = age, group = site, fill = as.factor(site)),
outlier.shape = 20,
outlier.color = "black")+
theme_graph()+
theme(legend.title = element_text(size = 7))+
scale_fill_viridis_d()+
facet_grid(~sex)+
labs(title = "Age distribution for different sites")
